<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[多项式 学习报告]]></title>
    <url>%2F2019%2F03%2F07%2F%E5%A4%9A%E9%A1%B9%E5%BC%8F-%E5%AD%A6%E4%B9%A0%E6%8A%A5%E5%91%8A%2F</url>
    <content type="text"><![CDATA[看过期的luogu网课学会了多项式 前置知识多项式定义由常数及未知数通过有限次乘法、加法以及自然数幂次乘方的组合，得到的代数表达式。 本文仅讨论单元多项式。 简记记$f(x) = \sum\limits_{i=0}^{n-1}a_ix^i$为一个n次多项式。 其中该多项式的次数为n，记为${\deg\;f}$。 对于该多项式次数为i的一项，我们记$f(x)[i]$为该项的系数${a_i}$，简写为$f[i]$。 算数运算设$f(x)=\sum\limits_{i=0}^{n-1}{a_ix^i},g(x)=\sum\limits_{i=0}^{n-1}b_ix^i$ 加减法$$(f+g)(x)=\sum\limits_{i=0}^{n-1}(a_i+b_i)\times x^i$$ $$(f-g)(x)=\sum\limits_{i=0}^{n-1}(a_i-b_i)\times x^i$$ 卷积（多项式乘法）$$(f\times g)(x)=\sum\limits_{i=0}^{n-1}\sum\limits_{j=0}^{n-1}a_i b_j \times x^{i+j}$$ 这个操作是$O(n^2)$的。 循环卷积$$(f \times g)(x) = \sum\limits_{i=0}^{n-1}\sum\limits_{j=0}^{n-1}a_ib_j\times [(i+j)\;(mod\;n)]$$ 复数 代数基本定理：任何一元n次方程在复数域内都恰好有n个解 虚数单位定义$i=\sqrt{-1}$，其中$i$被称为虚数单位。 复数复数集合符号为$\mathbb{C}$，$\mathbb{C}= \{ a+bi \mid a,b\in\mathbb R \} $ 对于一个复数$z=a+bi$: $a$被称为$z$的实部，记为$\mathbf {Re(z)}$ $b$被称为$z$的虚部，记为$\mathbf{lm(z)}$ 算数运算记$z_0,z_1\in\mathbb C,z_0=a_0+b_0i,z_1=a_1+b_1i$ 加减法$$z_0\pm z_1=(a_0\pm a_1)+(b_0 \pm b_1)i$$ 乘法$$z_0\times z_1 = (a_0a_1-b_0b_1)+(a_0b_1+a_1b_0)i$$ 可以将复数当成一个一次二项式来理解上面的式子。 复平面 复数$z=x+yi$与复平面上$(x,y)$一一对应。 $\varphi$为幅角，那么可以得到复数的三角表示： $$z=r\times (\cos \varphi+i\sin \varphi)$$ 欧拉定理$$e^{i\varphi}=\cos \varphi + i\sin \varphi$$ 模长表示复平面内向量${\vec z}$的模长，记为$\left|{z}\right|$ $$\left|z\right|=\sqrt{a^2+b^2}$$ 共轭表示复平面内与$z$关于x轴对称的点，记为$\bar z$ $$\overline z=a-bi$$ 不难得到: $$\overline zz=\left|z\right|^2$$ 共轭复数的四则运算都可以提取 $$\overline{z_0\pm z_1}=\overline{z_0}\pm\overline{z_1}$$ $$\lambda z=\lambda a+\lambda bi$$ $$\overline{z_0\times z_1}=\overline{z_0}\times \overline{z_1}$$ $$\frac{z_0}{z_1}=\frac{z_0\times \overline {z_1}}{\left|z_1\right|^2}$$ 三角表示的复数乘法 此部分内容来自课件 回顾复数乘法公式$$z_0 \times z_1 = (a_0a_1 + b_0b_1) + (a_0b_1 + a_1b_0) i$$，我们可以注意到$$\mathbf{Re}(z_0 \times z_1) = r_0 \cos\varphi_0 \times r_1 \cos\varphi_1-r_0 \sin\varphi_0 \times r_1 \sin\varphi_1 = r_0r_1 \times \cos(\varphi_0 +\varphi_1)$$，同时又有$$\mathbf{Im}(z_0 \times z_1) = r_0r_1 \times \sin (\varphi_0 + \varphi_1) $$。 尝试用三角表示改写乘法: $$(r_0 \times e^{i\varphi_0} ) \times (r_1 \times e^{i\varphi_1} ) = (r_0 \times r_1) \times e^{i(\varphi_0+\varphi_1)}$$ 棣莫弗定理$$z_0z_1 = r_0r_1 \times(cos(φ_0 + φ_1) + i \sin(φ_0 + φ_1))$$ 即两复数相乘的结果，模长为两者之积，幅角为二者之和。 棣莫弗公式： $$z^n = r^n \times (\cos(n\varphi) + i\sin(n\varphi))$$ 单位根满足方程$x^n = 1 $的所有的解，称为$n$次单位根。根据代数基本定理，$n$次方程在复数域内有$n$个解。 证明设$x=r\times (\cos \varphi+i\sin \varphi )$，若$x$是$n$次单位根，则： $$\begin{cases}r^n=1\ \cos (n\varphi)=1 \ \sin(n\varphi)=0\end{cases}$$ 推导过程：$\qquad x^n=1$ $\Rightarrow(r\times (\cos \varphi+i\sin \varphi ))^n=1$ $\Rightarrow(r^n\times (\cos n\varphi+i\sin n\varphi))=1$ $\Rightarrow \sin n\varphi = 1$ $\Rightarrow \varphi=0$ $\Rightarrow \cos n\varphi = 1 $ $\Rightarrow r^n=1$ $\Rightarrow r= 1$ 那么，$r=1,\varphi=\frac{2\pi+k}{n}$$k\in[0,n-1]\and k\in\mathbb Z$恰好是$x^n=1$的$n$个不同的解。 结合单位圆 很容易得到$n$个单位根分别为$e^{\frac{2k\pi }{n}i},k\in[1,n-1]\&amp;k\in\mathbb Z$ 记单位圆根$\mathbf \omega_n=e^{\frac{\omega\pi}{n}i}$,则$n$个单位根又可以写成${\mathbf \omega_n^k},k\in[1,n-1]\and k\in\mathbb Z$ 性质 $\mathbf \omega_n^m=\mathbf \omega_{n/k}^{m/k}$ $\mathbf \omega_n^2=\mathbf \omega_{n/2}$ $\mathbf \omega_n^j=- \mathbf \omega_n^{j+n/2}$ $\sum\limits_{k=0}^{n-1}\mathbf \omega_n^{kt}={\begin{cases} n,n\mid t\\0,n\nmid t \end{cases}}$(可通过等比数列求和证明) $[n\mid t]=\frac{1}{n}\sum\limits_{j=0}^{n-1}\mathbf \omega_n^{tj}$(该性质是FFT的关键) 性质5中，[条件判断句1]运算符返回值为true当且仅当条件判断句1为真。 快速傅里叶变换 快速傅里叶变换(Fast Fourier Transform),即利用计算机计算离散傅里叶变换(DFT)的高效、快速计算方法的统称，简称FFT。快速傅里叶变换是1965年由J.W.库利和T.W.图基提出的。采用这种算法能使计算机计算离散傅里叶变换所需要的乘法次数大为减少，特别是被变换的抽样点数N越多，FFT算法计算量的节省就越显著。 来源：百度百科 推导记 $\deg\;f = \deg \; g = n - 1 ​$，$f​$与$g​$的循环卷积为$h​$ $\qquad h[z]$ $\quad =\sum\limits_{x=0}^{n-1} \sum\limits_{y=0}^{n-1}f[x]\times g[y]\times [n\mid x+y-z]​$ $\quad =\sum\limits_{x=0}^{n-1} \sum\limits_{y=0}^{n-1}f[x]\times g[y]\times \frac{1}{n}\sum\limits_{t=0}^{n-1}\omega_n^{t(x+y-z)}​$ $\quad = \frac{1}{n}\sum\limits_{t=0}^{n-1}\omega_n^{-tz}(\sum\limits_{x=0}^{n-1}{f[x]\times \omega_n^{tx}})(\sum\limits_{y=0}^{n-1}g[y]\times \omega_n^{ty})​$ 设$F[t] = \sum\limits _{x=0} ^{n-1} f[x]\times \omega_n^{tx},G[t] = \sum\limits_{y=0}^{n-1}g[x]\times \omega_n^{ty},H[t] = F[t]\times G[t]$]]></content>
      <tags>
        <tag>学习报告</tag>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nim博弈 学习报告]]></title>
    <url>%2F2019%2F03%2F05%2FNim%E5%8D%9A%E5%BC%88-%E5%AD%A6%E4%B9%A0%E6%8A%A5%E5%91%8A%2F</url>
    <content type="text"><![CDATA[Nim取石子游戏甲，乙两个人玩Nim取石子游戏。nim游戏的规则是这样的：地上有n堆石子（每堆石子数量小于10000），每人每次可从任意一堆石子里取出任意多枚石子扔掉，可以取完，不能不取。每次只能从一堆里取。最后没石子可取的人就输了。假如甲是先手，且告诉你这n堆石子的数量，他想知道是否存在先手必胜的策略。 结论Nim博弈先手必胜，当且仅当：$$XOR_{a_1}^{a_n}=0$$ 证明（此部分搬运 y2823774827y的题解，在此对原作者表示敬意） 用比较通俗的方式讲一下吧： 题目本意是给出n堆石子，轮流在其中一堆去任意个，谁不能去谁就输。 思路：证明所有石子异或和为0则先手必输 证明： 反正最终情况就是每堆都为0，先手必输，所以我们考虑怎么把情况转换到这里。 如果异或和的最高位为i，则有一堆石子第i为为1（不然怎么会有i位） 设A1就为那堆石子，其他堆石子异或和设为x，总异或和设为k，则 A1 xor x=k，把A1变成A1 xor k，那么后手面对的则是（A1 xor k）xor x=0， 举个例子:11001 xor 11100=101，则有（11001 xor 101）xor 11100=0 如果现在的异或和已经为0了（不为最终情况），那么怎么转换异或和都不能为0 好，我们根据3 4点得出：如果先手异或和不为0，可以一步让后手的情况为异或和为0；如果先手异或和为0，那么后手异或和就不为0 终于开始进行游戏了，如果现在先手面对的情况异或和不为0，则一直让后手异或和为0，最后面对最终情况，后手输，则先手赢；如果先手面对的情况异或和为0，后手则赢 SG函数与ICG游戏（占坑，学了再写）]]></content>
      <tags>
        <tag>学习报告</tag>
        <tag>博弈论</tag>
        <tag>Nim博弈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[矩阵快速幂 学习报告]]></title>
    <url>%2F2019%2F03%2F05%2F%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82-%E5%AD%A6%E4%B9%A0%E6%8A%A5%E5%91%8A%2F</url>
    <content type="text"><![CDATA[矩阵的存储为方便编写函数，我们使用一个结构体Mat来存储一个矩阵。 同时可以构造函数使矩阵元素的初始值为0。 1234struct mat &#123; int m[N][N];//N视情况而定 mat()&#123;memset(m,0,sizeof(m));&#125;&#125; 矩阵乘法定义对于大小为$n\times m​$的矩阵$A​$和大小为$n\times k​$的矩阵$B​$，规定$C=A\times B​$，其中：$$C_{i,j}=\sum\limits_{k=1}^{n}A_{i,p}*B_{p,j}​$$ 代码实现1234567891011mat mul(mat a, mat b) &#123; mat ans; for(register int i = 1 ; i &lt;= n ; i++) &#123; for(register int j = 1 ; j &lt;= n ; j++) &#123; for(register int k = 1 ; k &lt;= n ; k++) &#123; ans.m[i][j] += a.m[i][k] * b.m[k][j]; &#125; &#125; &#125; return ans;&#125; 普通快速幂这里只给出实现。 123456789int power(int a, int b) &#123; int ans = 1;//一定要记住初始值为1 while(b) &#123; if(b&amp;1) ans = ans * a; a*=a; b&gt;&gt;=1; &#125; return ans;&#125; 矩阵快速幂意义常用于加速递推。 实现我们结合普通快速幂的思想，将元素换为矩阵，不难得到下面的代码： 123456789mat power(mat a, int b) &#123; mat ans;//这里的ans已经初始化，具体看下文 while(b) &#123; if(b&amp;1) ans = mul(ans, a); a = mul(a, a); b&gt;&gt;=1; &#125; return ans;&#125; 看到代码里的注释了?矩阵$ans$同样是要初始化的，不同于普通快速幂，这里的$ans$应初始化为单位矩阵。（不知道是啥的，百度去吧）(应该没人不知道吧…) 123for(register int i = 1 ; i &lt;= n ; i++) &#123; ans.m[i][i] = 1;&#125; 我们往往把它封装在init()里面，因为在数列递推问题中，要初始化的还有$base$矩阵。 不同的写法（打mul()太累了？），我们还可以在结构体内重载*和*=运算符。没什么大的区别。 123456789101112131415struct mat &#123; int m[N][N]; mat()&#123;memset(m,0,sizeof(m));&#125; mat operator * (const mat &amp;a) const &#123; mat ans; for(register int i = 1 ; i &lt;= n ; i++) &#123; for(register int j = 1 ; j &lt;= n ; j++) &#123; for(register int k = 1 ; k &lt;= n ; k++) &#123; ans.m[i][j] += m[i][k] * a.m[k][j]; &#125; &#125; &#125; return ans; &#125;&#125; 那么，快速幂中的mul()就要换成*。 关于数列加速递推构造矩阵我讲不来怎么构造 为了使用矩阵快速幂，我们需要构造一个矩阵base，使得每乘一次base，就可以得到数列的下一项。 需要注意我们在矩阵快速幂的时候，指数的值应当是n-2而不是n。 快在哪？快速幂O(logn)递推O(n)你说快在哪？ 一些需要注意的地方（感谢xht37帮我Debug…） 在可以模膜的地方都模一下，可以防止爆精度涨rp。 欧拉定理不能运用在矩阵快速幂中，模数是质数也不行（用在普通快速幂中也没觉得快多少？ 数据类型一定要一致不然会爆零 差不多就这些了。]]></content>
      <tags>
        <tag>学习报告</tag>
        <tag>矩阵快速幂</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[位运算与二进制状态压缩 学习报告]]></title>
    <url>%2F2019%2F02%2F26%2F%E4%BD%8D%E8%BF%90%E7%AE%97%E4%B8%8E%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9-%E5%AD%A6%E4%B9%A0%E6%8A%A5%E5%91%8A%2F</url>
    <content type="text"><![CDATA[前言在计算机中，数据都使用二进制存储与操作。因此，学习位运算不仅可以优化我们的程序（使可读性–），还可以帮助我们理解程序运行中的种种表现，帮助我们更好的DEBUG（卡常） 学习资料：《进阶指南》 位运算算术位运算下面给出四种算术位运算： 与 或 非 亦或 and,&amp; or,\ not,~ xor,^ 注意与和或运算与条件连接使用的与和或不同，非也从!变为~。 这些运算的意义不再赘述。 移位左移低位补0，高位越界舍弃。 对于左移操作，我们有： $${1&lt;&lt;n=2^n,n&lt;&lt;k=2^k\times n}$$ 右移低位越界舍弃，高位以符号位补充。 对于右移操作，我们有：$${n&gt;&gt;k=\lfloor{\dfrac{n}{2^k}}\rfloor}$$ 状压基本操作 操作 运算 取出n的第k位 (n&gt;&gt;k)&amp;1 取出n的第0~k-1位 n&amp;((1&lt;&lt;k)-1) n的第k位取反 n^(1&lt;&lt;k) n的第k位赋1 n\ (1&lt;&lt;k) n的第k位赋0 n&amp;(~(1&lt;&lt;k)) 可以在脑中模拟一下，应该很好理解 成对变换对于一个偶数${n}$，我们有${n+1=n \; xor \;1}$ 同样的，对于一个奇数${n}$，我们有${n-1=n \; xor \;1}$ 运用滚动数组和邻接表存反图 lowbit1int lowbit(int x)&#123;return x&amp;-x;&#125; 这是代码，作用为取出数$x$的最低位的1。 运用了二进制补码的相关知识。不再赘述 是树状数组的核心。 后记使用位运算可以显著优化运行时间，因此，在对程序可读性无重大影响的基础上，笔者会尽量使用位运算。]]></content>
      <tags>
        <tag>学习报告</tag>
        <tag>位运算</tag>
        <tag>状压</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[字符串Hash 学习报告]]></title>
    <url>%2F2019%2F02%2F14%2F%E5%AD%97%E7%AC%A6%E4%B8%B2Hash-%E5%AD%A6%E4%B9%A0%E6%8A%A5%E5%91%8A%2F</url>
    <content type="text"><![CDATA[听julao xht的建议学了字符串哈希。 先挂一张图： 图源：xht 拍自《进阶指南》 简介意义如书中所说，字符串hash可以将任何字符串映射成一个非负整数的值，从而方便进行比较。 hash冲突指两个或多个不同的字符串被映射到同一个非负整数的情况。 流程如何求给定串的Hash值首先选取一个固定值P（最好是质数），我们可以把字符串看成一个P进制数，以此映射到一个非负整数的值上。 接着选取一个固定模数M，将上述P进制数模M意义下的值作为原字符串的Hash值。 通常，我们选取$2^{64}$作为模数，这样就可以使用unsigned long long 类型来储存原P进制数，在大于模数M时自动溢出，可避免低效取模运算。 如何处理hash冲突任何数据都无法避免Hash冲突 我们可以做的，只是尽可能减少冲突概率。 有以下几种做法： 在模数上对于P，我们可以选用P=131或P=13331。对于M，我们可以选用19260817 其他做法可以进行多组Hash，使用一个多元组储存不同hash的结果，在比对时逐次比对，可以有效降低Hash冲突。 对应字符串的操作设$F[s]​$储存字符串$s​$的Hash值，那么对于一个新串$t​$，我们有 $${F[t]=(F[s+t]-F[s]*P^{strlen(t)})}$$ 对应到P进制数上，就相当于左移操作。 当$t$为一个字符${c}$时，我们可以得到字符串Hash值的初始化公式： $${F[s+c]=F[s]+p\times value[c]}$$ 一般$value[c]$取$ASCII$码中字符c的对应值。 例题Luogu P3370 【模板】字符串哈希(这题${Set}$和${Map}$可以水过) CH1401 兔子与兔子]]></content>
      <tags>
        <tag>学习报告</tag>
        <tag>字符串</tag>
        <tag>Hash</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[裴蜀定理 学习报告]]></title>
    <url>%2F2019%2F02%2F13%2F%E8%A3%B4%E8%9C%80%E5%AE%9A%E7%90%86-%E5%AD%A6%E4%B9%A0%E6%8A%A5%E5%91%8A%2F</url>
    <content type="text"><![CDATA[（这玩意真不难） 前置知识会$gcd$就行了。 定理$$\forall a,b,x,y,d\in Z,ax+by=d当且仅当gcd(a,b)\mid d$$ 简要证明设$s=gcd(a,b)$，显然有$s\mid a$且${s\mid b}$ 又因为${x,y\in Z}$，显然有$s\mid ax$且${s\mid by}$ 所以${s\mid ax+by}$ 又因为${ax+by=d}$ 所以$s\mid d$ 所以$gcd(a,b)\mid d$ 推广 方程$ax+by=1$有解当且仅当$x,y$互素 对于给定数列$\{a\}$,表达式$\sum\limits_{i=1}^na_ix_i&gt;0 $最小正整数值为${\gcd\limits_{1\le i\le n}\{|a_i|\}}$ 应用P4549 【模板】裴蜀定理 直接运用推广2求解就好，记得取${|a_i|}$ (说了很简单)]]></content>
      <tags>
        <tag>学习报告</tag>
        <tag>裴蜀定理</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[表达式树及三序表达]]></title>
    <url>%2F2019%2F02%2F13%2F%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A0%91%E5%8F%8A%E4%B8%89%E5%BA%8F%E8%A1%A8%E8%BE%BE%2F</url>
    <content type="text"><![CDATA[预备知识需要了解树的先序、中序、后序遍历 先来看一道题目 （源自洛谷有题） 这是2017年TG初赛试题，这篇文章主要讲述如何快速有效地解这一类题。 关于表达式的三序表达定义我们用一个例子来说明： 名称 表达式 中序表达式 $2\times 3/(2-1)+3\times(4-1)$ 前序表达式 $+/\times23-21*3-41$ 后序表达式 $23\times21-/341-\times+$ 大致明白是什么了叭？ 意义有人问： 中序表达式这么方便，为什么还要开发看不懂的前序和后序表达式呢？ 原因很简单：中序表达式会使用括号 这将极大程度影响（机器）运算的效率。 那么，对于前序和后序表达式，即使是同样的式子与操作符，不同的优先级都将导致其表达式的不同。也就不存在引用括号的情况。 已知一个式子的中序表达，如何求它的前序和后序表达呢？也很简单。 引入一个概念： 表达式树我们来它长什么样： 这是表达式${(1+2)-(3\times 4)}$的表达式树。 规定 表达式树的叶节点能且仅能为运算数 除叶节点外的节点全部为操作符 节点的深度与运算的优先级正相关 根据以上三点，可以得到一个中序表达式的表达式树。 转换通过这颗表达式树，我们很容易将中序表达式转化为等价的前序，后序表达式 如何转换？ 得到一个中序表达式后，我们先将它转化为一颗表达式树。 例如上面的$(1+2)-(3\times 4)$ 转化后，对这棵树先序遍历，可以得到等价的前序表达式。 同样，对其后序遍历，可以得到等价的后序表达式。 这棵树的中序遍历，则是我们常用的中序表达式。]]></content>
      <tags>
        <tag>技巧</tag>
        <tag>学术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P2822 组合数问题 解题报告]]></title>
    <url>%2F2019%2F02%2F13%2F%E7%BB%84%E5%90%88%E6%95%B0%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[暴力能拿90（雾 题目题目描述组合数 ${C_n^m}$表示的是从${n}$ 个物品中选出${m}$个物品的方案数。举个例子，从 ${(1,2,3)}$三个物品中选择两个物品可以有 ${(1,2),(1,3),(2,3)}$这三种选择方法。根据组合数的定义，我们可以给出计算组合数${C_n^m}$的一般公式： $${C_n^m=\frac{n!}{m!(n-m)!}}$$ 其中${n!=\prod\limits_{i=1}^ni}$；特别地，定义${0!=1}$。 小葱想知道如果给定${n,m}$和${k}$，对于所有的${0\leq i\leq n,0\leq j\leq \min \left ( i, m \right )}$有多少对 (i,j)(i,j) 满足${C_i^j}$是${k}$的倍数。 输入输出格式输入格式：第一行有两个整数${t,k}$，其中代${t}$表该测试点总共有多少组测试数据，${k}$的意义见问题描述。 接下来${t}$行每行两个整数${n,m}$，其中${ n,m}$的意义见问题描述。 输出格式：共$t$行，每行一个整数代表所有的$0\leq i\leq n,0\leq j\leq \min \left ( i, m \right )$中有多少对$(i,j)$满足$C_i^j$是$k$的倍数。 输入输出样例输入样例#1： 121 23 3 输出样例#1： 11 输入样例#2： 1232 54 56 7 输出样例#2： 1207 17 说明【样例1说明】 在所有可能的情况中，只有$C_2^1 = 2$是2的倍数。 【子任务】 分析30分做法照着题目打组合数公式。 优化的话，可以将阶乘打表，或者写INT_128将$C_{0\le i\le 2000}^{0\le j \le i}$打表 很无脑，没写代码。 50分做法打标算，多组数据输出不换行。 就像这样 70分做法发现需求出$C_{0\le i\le n}^{0\le j\le \min(i,m)}$ 考虑组合数递推：$$ C^m_n=C^{m-1}_{n-1}+C^{m-1}_n​$$ 可${O(mn)}$预处理。 但需要注意初始化，即递推起点：$${C_0^0=C_1^0=C_1^1=1}$$ 实现：123456789void build()&#123; c[0][0]=c[1][0]=c[1][1]=1; for(register int i=2;i&lt;=2000;i++)&#123; c[i][0]=1; for(register int j=1;j&lt;=i;j++)&#123; c[i][j]=(c[i-1][j-1]+c[i-1][j]); &#125; &#125;&#125; 90分做法观察到多组数据模数一致，可以在预处理时取模。 实现：123456789void build()&#123; c[0][0]=c[1][0]=c[1][1]=1; for(register int i=2;i&lt;=2000;i++)&#123; c[i][0]=1; for(register int j=1;j&lt;=i;j++)&#123; c[i][j]=(c[i-1][j-1]+c[i-1][j])%k; &#125; &#125;&#125; 100分做法观察到模数一致，考虑实现${O(1)}$查询：用前缀和维护一个答案数组ans[n][m]，在预处理组合数时进行维护。 注意容斥： 1ans[i][j]=ans[i-1][j]+ans[i][j-1]-ans[i-1][j-1]; 注意对于当前数据的更新： 1if(!c[i][j]) ans[i][j]++; 注意答案传递：（想不明白可以画一个杨辉三角手玩） 1ans[i][i+1]=ans[i][i]; 对于100分的做法，需要注意到$Sample\;2$：在$Sample\; Input\; 2$中，出现了$m&gt;n$的违法情况，对于这类数据，在答案输出时特判，输出ans[n][n] 代码1234567891011121314151617181920212223242526272829#include&lt;cstdio&gt;#define ll long longinline ll min(ll a,ll b)&#123;return a&lt;b?a:b;&#125;const int maxn = 2010;ll t,n,m,k,c[maxn][maxn],ans[maxn][maxn];inline void build()&#123; c[0][0]=c[1][0]=c[1][1]=1; for(register int i=2;i&lt;=2000;i++)&#123; c[i][0]=1; for(register int j=1;j&lt;=i;j++)&#123; c[i][j]=(c[i-1][j-1]+c[i-1][j])%k; ans[i][j]=ans[i-1][j]+ans[i][j-1]-ans[i-1][j-1]; if(!c[i][j]) ans[i][j]++; &#125; ans[i][i+1]=ans[i][i]; &#125;&#125;int main()&#123; scanf("%lld%lld",&amp;t,&amp;k); build(); while(t--)&#123; scanf("%lld%lld",&amp;n,&amp;m); printf("%lld\n",m&gt;n?ans[n][n]:ans[n][m]); &#125; return 0;&#125; 注意事项这题坑不少，谈一谈作者实现时的问题： 对于$m=0$的数据，快读有锅，应换用标准输入输出； 多组数据题，输出时一定要换行！puts(&quot;&quot;);； 容斥和答案继承都是坑； 若非标算，在多组数据处理前应初始化ans； 目前没想到离线做法。]]></content>
      <tags>
        <tag>解题报告</tag>
        <tag>组合数学</tag>
        <tag>组合数递推</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SDOI2009 SuperGCD解题报告(瞎搞)]]></title>
    <url>%2F2019%2F02%2F12%2FSuperGCD%2F</url>
    <content type="text"><![CDATA[题目简述高精求gcd 思想python不存在高精的 代码明明能更短1print (__import__('fractions').gcd(int(input()),int(input()))) 人生苦短，我用python]]></content>
      <tags>
        <tag>解题报告</tag>
        <tag>py3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最小生成树 学习报告]]></title>
    <url>%2F2019%2F02%2F11%2F%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91-%E5%AD%A6%E4%B9%A0%E6%8A%A5%E5%91%8A%2F</url>
    <content type="text"><![CDATA[预备知识生成树概念给定一张无向图${G{(V,E)}}$中，${(u,v)}$代表连接顶点${u,v}$的边，${w(u,v)}$代表此边的权重，我们称它的一个无环子集${G’(V,E’)}$ （注意这里的${V}$与母集的${V}$一致） 为图${G}$的一个生成树。 求法一张图的生成树可以通过任意顶点dfs寻得。 这里是代码： 123456789101112131415161718192021222324252627#include&lt;cstdio&gt;#define maxn 10010int map[maxn][maxn];bool vis[maxn];int n,m,u,v,w;void dfs(int x)&#123; vis[x]=1; for(register int i=1;i&lt;=n;i++)&#123; if(x==i) continue; if(!vis[i]&amp;&amp;map[i][x])&#123; printf("%d -&gt; %d : %d\n",x,i,map[x][i]); dfs(i); &#125; &#125;&#125;int main()&#123; scanf("%d%d",&amp;n,&amp;m); for(register int i=1;i&lt;=m;i++)&#123; scanf("%d%d%d",&amp;u,&amp;v,&amp;w); map[u][v]=w; map[v][u]=w; &#125; dfs(1); return 0;&#125; 注意：如果给定的图中存在一个环${C(V,E’)}$，即包含所有的顶点，那么此图的dfs生成树将会退化为链。 典例：如果我们对此图求dfs生成树 将会得到如下结果： 另:自己在考场上发现的（除了我都知道的）知识：对于树${T(V,E)},\forall P \in V$作为其根节点，都将得到一颗树${T’}$。 并查集又称用于多种不相交集合的数据结构 支持操作能够支持对于树的两种操作： 查询一棵树的根节点； 合并两棵树； 朴素代码12345678#define maxn 10010int fa[maxn];//维护父节点void init(int n)&#123;while(n--)fa[n]=n;&#125;int find(int x)&#123;return fa[x]==x?x:find(fa[x]);&#125;//递归实现查询void merge(int x,int y)&#123; int xx=find(x);int yy=find(y); fa[xx]=yy;&#125; 优化有路径压缩与按秩合并两种方法，这($zu\grave{o}​$)里($zh\check{e}​$)只($zh\check{i}​$)讲($hu\grave{i}​$)按秩合并：思想：用size[i]维护以${i}​$为根节点的子树的大小，在合并时将小子树合并到大子树上。 代码123456789#define maxn 10010int fa[maxn],size[maxn];void init(int n)&#123;while(n--) fa[n]=n,size[n]=1;&#125;int find(int x)&#123;return fa[x]==x?x:find(fa[x]);&#125;void merge(int x,int y)&#123; int xx=find(x);int yy=find(y); if(size[xx]&gt;size[yy]) std::swap(xx,yy); fa[xx]=yy;size[yy]+=size[xx];&#125; 最小生成树简介MST（最小生成树），即为给定图的所有生成树中路径权值和最小的一个生成树。 求解有Prim和Kruskal两种算法。 下面将讲解Kruskal算法 克鲁斯卡尔算法介绍先将给定图的边按权值从小到大排序，然后利用并查集的思想，依次将权值最小的边的两个端点合并，保证了最小原则。在合并时，注意检查两颗子树是否隶属同一根节点，否则跳过，保证了无环原则。 代码实现12345678910111213141516171819202122232425262728293031323334353637383940#include&lt;cstdio&gt;#include&lt;algorithm&gt;#define maxn 10010#define maxm 20010using std::sort;int fa[maxn];void init(int n)&#123;while(n--)fa[n]=n;&#125;int find(int x)&#123;return fa[x]==x?x:find(fa[x]);&#125;bool merge(int x,int y)&#123; int xx=find(x);int yy=find(y); if(xx==yy) return 0; fa[xx]=yy; return 1;&#125;struct node&#123; int x,y,w;&#125;a[maxm];bool cmp(node a,node b)&#123;return a.w&lt;b.w;&#125;int main()&#123; int n,m,ans=0,cnt=0; scanf("%d%d",&amp;n,&amp;m); init(n); for(register int i=1;i&lt;=m;i++)&#123; scanf("%d%d%d",&amp;a[i].x,&amp;a[i].y,&amp;a[i].w); &#125; sort(a,a+m,cmp); for(register int i=1;i&lt;=m;i++)&#123; if(merge(a[i].x,a[i].y))&#123; ans+=a[i].w; cnt++; &#125; if(cnt==n-1)&#123; printf("%d",ans); break; &#125; &#125; return 0;&#125; 注意到一个性质边按权值从小到大排序，每次仅取出最小边，可以考虑用堆来维护（虽然被julao痛批但我一定要写上） 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include&lt;cstdio&gt;#include&lt;queue&gt;#define maxn 10010#define maxm 20010using namespace std;struct node&#123; int x,y,w; bool operator &lt; (const node a)const&#123; return a.w&lt;w; &#125;&#125;;priority_queue&lt;node&gt; q;int fa[maxn]; void init(int n)&#123;while(n--) fa[n]=n;&#125;int find(int x)&#123;return fa[x]==x?x:find(fa[x]);&#125;bool merge(int x,int y)&#123; int xx=find(x);int yy=find(y); if(xx==yy) return 0; fa[xx]=yy; return 1;&#125;int main()&#123; int n,m,ans=0,cnt=0; scanf("%d%d",&amp;n,&amp;m); init(n); for(register int i=1;i&lt;=m;i++)&#123; node tmp; scanf("%d%d%d",&amp;tmp.x,&amp;tmp.y,&amp;tmp.w); q.push(tmp); &#125; for(register int i=1;i&lt;=m;i++)&#123; node tmp=q.top(); q.pop(); if(merge(tmp.x,tmp.y))&#123; ans+=tmp.w; cnt++; &#125; if(cnt==n-1)&#123; printf("%d",ans); break; &#125; &#125; return 0;&#125; （这里的堆并没有起到优化的作用，相反常数比sort大一些，仅供喜欢堆的选手使用）]]></content>
      <tags>
        <tag>学习报告</tag>
        <tag>MST</tag>
        <tag>Kruskal</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[扩展欧几里得 学习报告]]></title>
    <url>%2F2019%2F02%2F10%2F%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[预备知识取模运算数${a}$对数${b}$取模，等价于数${a}$减去数${a}$除以数${b}$向下取整的商乘上数${b}$的差（好绕啊）。 其实就是下面这个式子：$${a(mod\;b){\Longleftrightarrow}a-{\left\lfloor\dfrac{a}{b}\right\rfloor}\times b}$$很好理解。 最大公约数数${a}$,${b}$的最大公约数指同时能够整除${a}$,${b}$的最大的正整数。记为 _gcd(a,b)_。 引子欧几里得定理原理又称辗转相除法，原理是这个式子：$${gcd(a,b)=gcd(b,a(mod \; b))}$$可以看出这个式子能够递归求解，递归边界为：$${b=0}$$ 证明${\forall a,b 且a&gt;b}$ 若${b\mid a}$ ，显然有${gcd(a,b)=b}$. 考虑${b\nmid a}$： 不妨设${a=bk+c}​$，显然有$a\equiv c\pmod{b}​$. 设${d\mid a}$且${d\mid b}$，则${c=a-bk\frac{c}{d}=\frac{a}{d}-\frac{b}{d}k}$ 故${d\mid c}$. 故${\forall c\mid a}$且${c\mid b}$，${c\mid a(mod\; b)}​$. 反过来，设${d\mid b}$ ${d\mid a(mod\; b)}$，同样有${\frac{a\;mod\;b}{d}=\frac{a}{d}-\frac{b}{d}k\frac{a\;mod\;b}{d}+\frac{b}{d}k=\frac{a}{d}}$. 故${d\mid a}$. 故${gcd(a,b)=gcd(b,a(mod\;b))}$. 代码实现1int gcd(int a,int b)&#123;return b?gcd(b,a%b):a;&#125; 很简单，一行就够了。 扩展欧几里得用途解方程${ax+by=gcd(a,b)}​$ 推导设${ax_1+by_1=gcd(a,b)}​$. ······① ${bx_2+a(mod\; b)y_2=gcd(b,a(mod\; b))}​$ ······② 由欧几里得定理：${gcd(a,b)=gcd(b,a(mod\; b))}​$ ······③ 由②③： ${bx_2+a(mod\; b)y_2=gcd(a,b)}​$ ······④ 由①④： ${ax_1+by_1=bx_2+a(mod\;b)y_2}​$ ······⑤ 由取模运算等价形式得： ${a(mod\; b)=a-{\left\lfloor\dfrac{a}{b}\right\rfloor}\times b}​$ ······⑥ 由⑤⑥： ${ax_1+by_1=bx_2+({a-{\left\lfloor\dfrac{a}{b}\right\rfloor}\times b})y_2}​$ ······⑦ 由⑦移项得： ${ax_1+by_1=ay_2+b(x_2-{\left\lfloor\dfrac{a}{b}\right\rfloor}y_2)}​$ ······⑧ 可得方程的一组可行解为： $\begin{cases}{x_1=y_2}\\y_1=x_2-{\left\lfloor\dfrac{a}{b}\right\rfloor}y_2\end{cases}$ ······⑨ 由⑨得：${\forall x_n,y_n\ne0}$，​${\begin{cases}x_n=y_{n+1}\\y_n=x_{n+1}-{\left\lfloor\dfrac{a}{b}\right\rfloor}y_{n+1}\end{cases}}$ ······⑩ 即每一个${x,y}​$都可由上一层推出. 递归边界为：${b=0}​$，此时，x=1，y=0. 代码实现12345void exgcd(int a,int b,int&amp; x,int &amp;y)&#123; if(!b)&#123;x=1,y=0;return;&#125; int g=exgcd(b,a%b,y,x);y-=a/b*x; return;&#125; 典例题目链接：NOIP2012 同余方程推导过程不妨将题目中的${ax\equiv 1\pmod{b}}$转化为${ax+by=1}$. 若要求${x}$的最小正整数解，很显然，${y}$为负数. 由裴蜀定理：${ax+by=1}$有解，当且仅当${a,b}$互素. 那么，${gcd(a,b)=1}$. 求出了${gcd(a,b)}$，就可以运用exgcd来求解. 需要注意的是，${exgcd}$求出的只是一组可行解，需对解出的${x}$进行调整使其成为最小正整数解. 如何调整？ 仅需对x进行增减b的倍数的操作，使其恰大于0. 该操作可以简化为取模运算。 正确性可以这样理解： 因为${a,b}$互素，所以对于${x}$，对其增减任意倍数的${b}$，都能保证${b\mid (1-ax)}$. 代码实现1234567891011121314#include&lt;cstdio&gt;long long a,b,x,y;void exgcd(long long a,long long b,long long&amp; x,long long &amp;y)&#123; if(!b)&#123;x=1,y=0;return;&#125; exgcd(b,a%b,y,x);y-=a/b*x; return;&#125;int main()&#123; scanf("%lld %lld",&amp;a,&amp;b); exgcd(a,b,x,y); printf("%d",(x+b)%b); return 0;&#125;]]></content>
      <tags>
        <tag>学习报告</tag>
        <tag>exgcd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[To Do List]]></title>
    <url>%2F2019%2F02%2F10%2FHBSTC-2019-%E4%BB%BB%E5%8A%A1%E6%B8%85%E5%8D%95%2F</url>
    <content type="text"><![CDATA[显而易见搞不完 学习计划 数学 位运算（状压常用） 数论 欧拉函数 中国剩余定理 逆元线性递推 线性筛 裴蜀定理 基础BSGS 线代 矩阵求逆 矩阵快速幂 组合 Lucas定理 Catalan数 斯特林数 容斥 博弈论 Nim博弈 动态规划 记忆化搜索 区间DP 状压DP 斜率优化 搜索 双向BFS 迭代加深搜索 字符串 Hash KMP 数据结构 单调栈 单调队列 树状数组(可能依然不会) 带Lazy Tag的线段树 Treap 图论 LCA k短路（学不来） 强联通分量 Tarjan 二分图最大匹配 最小环（至少会一种求法吧？） 网络流(有时间再开) 优化及玄学？ 快读快写 模拟退火 离散化 离线（到底怎么搞啊） 复习计划 并查集 dfs bfs Dijkstra+Heap SPFA(能不用就不用) 手写qsort(用处不大?) 打表 二分板子 三分（有时间再） 二维前缀和&amp;差分 线性DP（多写题） 背包 杂项 Nim博弈学习报告补锅]]></content>
      <tags>
        <tag>复习计划</tag>
        <tag>学习计划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019寒假成都摸鱼记]]></title>
    <url>%2F2019%2F02%2F01%2F2019%E5%AF%92%E5%81%87%E6%88%90%E9%83%BD%E6%91%B8%E9%B1%BC%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[前言还没放寒假的时候就知道要出去了，而且不用考生物，也是比较期待吧，于是肆意颓whk。这篇游记是Day7晚上在火车上写的，大多数印象比较清晰，知识点忘完了。 游记较长，大家可以跳着看。 Day -inf突然听说寒假要出去玩，还不用考生物，感觉很爽，也开始期待这场旅行（颓文化课）了。 Day -1上午考完英语后，就往校门口跑。没到门口就看到我爹了，但没看到潘老师。打电话才知道去考场找我们去了，假，连我在桌子上留的纸条都没看见。总归是到校门口了，就往火车站走。在赶时间的情况下，还在火车站对面的铁酒吃了一顿不错的午餐，心真是大。不过也没有很赶啦，着急地去了候车室后发现还早，就玩起了手机。候车的时候吃逼乎的安利下了这个神奇的计算器：Kalkyl（真叫这个，不是乱码） 居然可以画图像！虽然我严重怀疑这个${f(x)=x^x}$的图像画的有问题. 玩了会觉得没啥意思，然后就上车了。 在车上写了贪心的学习报告。本来准备写完后写线性DP的，但是鉴于贪心写了1000+（我太懒了），就没写了，开始颓CSGO。 打了一下午死斗，全是机器人一点都不好玩。手机也没有信号，又回忆起在重庆旅游时手机有信号没电的痛了…… 补了《Unnatural》的第一话，太好看了wocccccccccc！！可为什么硕鼠不能下载收费视频啊QAQ。 也没有全程颓啦，玩累了后把洛谷blog上的文章搬到了hexo上，顺便修改了一下补以前的锅。 关于《巴黎圣母院》，我忘了。 晚上没睡好QAQ，对面的小孩是真的吵。就晕晕地睡了大概四个小时。 这无所事事的一天就过去了。 Day 0早上6:00到站，第一感觉就是，火车站怎么跟襄阳站一样破，才知道这是老城区。（去的照片搞丢了，这是回来的时候照的） 出站后，找了好久才看到龟缩在角落的KFC，吃的也不算是丰盛。 实在是太困了…于是去了锦里的Starbucks，太早了人家都还没营业，好心的店主先把我们放进去了www。 待到了大概9:30的样子，回酒店了。感觉从酒店去锦里的时间比从锦里去酒店的时间要长的多。在酒店大堂看到了关老师(没上一节课的班主任)。 领了听课证、课表和笔记本后，就去吃午饭了。没吃火锅.难受.jpg。下午也没干啥，在酒店打了一下午LOL。 然后Day 0就结束了，依然无所事事。 Day 1起的早，在食堂吃了早饭后，得知教室居然在食堂里面？？？不过还不错啦。 最开始是hcy老师讲搜索，DFS我就没会过，讲了个框架，剩下大部分是讲例题。八皇后到是会，但八数码是啥啊……讲八数码，hcy就开始讲Hash，说到Hash，我就想到一个月前在机房用STL_SetA掉的字符串哈希，但是八数码好像并不能用Set做……一整节课，基本上强制在线。 搜索终于讲完了，接着讲的是贪心，这个我会。 国王游戏终于可以自己推了，高精依然不会（想）写。 贪心大概就是做题讲题做题讲题，知识性的东西并不多。 再然后就是分治与二分（没讲三分QAQ）。 思想还是清楚了，毕竟学过。然而在做题的时候发现自己打的好像是个假的二分板子： 12345while(l+1&lt;r)&#123; int mid=(l+r)&gt;&gt;1; if(ans&gt;=mid)mid=l; else mid=r;&#125; 然后自己的DEBUG套路好像也行不通了（增减”=“号与+1或-1）。 于是老老实实地就题论题打板子。 至于快速幂，讲的板子好像和我打的又不太一样还好我那个也能用。 晚上把部分题写了写，剩下了一些（懒得）难以实现的。 回到酒店后颓了几集《Unnatural》。 Day 1就结束了。 Day 2没吃早饭（真的吃不下） 早上去了没来什么人？？？（果然都吃早饭去了） 一整天都在讲数据结构。 二叉堆？_priority_queue_就好了！ 二叉搜索树？_set_就好了！ 改革春风吹满地，_STL_真争气。 然后就讲起了并查集。 板子还是比较熟的，不过老师没讲按秩合并，只讲了路径压缩。 这是按秩合并的板子: 12345678int fa[maxn],size[maxn];void init(int n)&#123;for(register int i=1;i&lt;=n;i++)&#123;fa[i]=i;size[i]=1;&#125;&#125;int find(int x)&#123;return fa[x]==x?x:find(fa[x]);&#125;void merge(int x,int y)&#123; int xx=find(x),yy=find(y); if(size[xx]&gt;size[yy])swap(xx,yy); fa[xx]=yy;size[yy]+=size[xx];&#125; 讲起了线段树： 我果然还是不会有灵魂（Lazy Tag ）的线段树QAQ。懂是懂了，但是怎么实现啊 在luogu找了题解学习，大概明白怎么实现了。 讲完lazy tag，又讲了一大堆玄学？ 那一刻，仿佛所有题都能套线段树A掉。线段树太棒了 树状数组离线了……学不来晚上写了一写题目，很多堆部分的练习以前都写过。 期望的RMQ和LCA都没有讲。 Day 2结束了。 Day 3考试日。 上午在讲数论，并没有慌得一批。 gcd有一个更加简短的实现了： 1int gcd(int a,int b)&#123;return b?gcd(b,a%b):a;&#125; lcm相对简单: 1int lcm(int a,int b)&#123;return a*b/gcd(a,b);&#125; 关于扩展欧几里得，以前打乘法逆元的板子时了解过，一直不会推，现在也会了。这里只给出代码： 123456789int exgcd(int a,int b,int &amp;x,int &amp;y)&#123; if(!b)&#123; x=1;y=0; return a; &#125; int g=exgcd(b,a%b,y,x); y-=a/b*x; return g;&#125; 然后是筛法的预备知识：质数判定： 只需要枚举到${\sqrt n}​$就行了,但需要注意从2枚举。 1234567bool check(int n)&#123; if(n==1||n==0) return 0; for(register int i=2;i&lt;=sqrt(n);i++)&#123; if(!(n%i)) return 0;//一定要注意位运算符优先于算数运算符 &#125; return 1;&#125; 然后是埃氏筛（好久没打写挂了好几次）： 12345678for(register int i=1;i&lt;=maxn;i++)&#123; if(check(i)&amp;&amp;!vis[i])&#123; is[i]=1; for(register int j=i;j&lt;=maxn;j+=i)&#123; vis[i]=1; &#125; &#125; &#125; 质因数分解：不放在这了。 最后就是逆元了： 可以运用费马小定理： ${a^{p-1}}$ ≡ 1 (mod p),p为质数,a与p互质 （注意p为质数，不过noip如果要求逆元，p肯定是质数） 由此可得： a*${a^{p-2}}$ ≡ 1 (mod p)所以，当模数为质数p时，a的逆元等于${a^{p-2}}$‘ 当然也可以运用扩展欧几里得，这里不再赘述。 知识点就这些，也没写到什么题。下午就开始考试了。 这是题目： T1随便写（虽然考场上没写优化挂了60分） T2在考场上想了一个用set维护的骚操作，复杂度带log，应该能过，可惜最大值维护错了。 这是改后的代码： 1234567891011121314151617181920212223242526272829303132333435363738#include&lt;cstdio&gt;#include&lt;set&gt;#define max(a,b) a&gt;b?a:b#define maxn 100010using namespace std;set&lt;int&gt;a;set&lt;int&gt;::iterator it;int main()&#123; freopen("guinness.in","r",stdin); freopen("guinness.out","w",stdout); int m,x,n,t,cnt=1,ans,maxx=0; scanf("%d",&amp;m); for(register int i=1;i&lt;=m;i++)&#123; scanf("%d",&amp;x); a.insert(x); &#125; scanf("%d",&amp;t); for(register int i=1;i&lt;=t;i++)&#123; it=a.begin();ans=1; scanf("%d",&amp;n);cnt=0;int tmp[n+1]; for(register int j=1;j&lt;=n;j++)&#123; scanf("%d",&amp;x); tmp[++cnt]=x; bool getans = 0; for(it,ans;it!=a.end();it++,ans++)&#123; if(x&lt;*it)&#123; printf("%d ",ans); getans=1; break; &#125; &#125; if (!getans) printf("%d ",a.size()+1); &#125; printf("\n"); while(cnt) a.insert(tmp[cnt]),cnt--; &#125; fclose(stdin);fclose(stdout); return 0;&#125; T3可以爆搜，但是没时间（懒得写）了，就没写，直接交上去了。 所以成绩并不是很好。 _Expected:140_ _Score:40_ Day 4换老师了。 今天讲的是图论。 先讲了一大堆图的概念，学过了，所以在下面复习_Dijkstra+Heap_ 然后开始讲图的存储方式，前向星听了一下，剩下的学过，继续颓_Dijkstra+Heap_ 终于开始讲最短路了：果然开始就讲Dijkstra…没有堆优化太咸了!!! 于是继续颓_Dijkstra+Heap_… 讲完后开始讲可爱的SPFA了，标准版的最短路果然还是构造数据卡了SPFA。 挂个SPFA的工作图: 关于Bellman Ford，只是提了一下和SPFA很像，丢了一个blog链接，并没有细讲。 讲完单源，自然开始讲多源 多源自然讲了可爱的$O(n^3)$的Floyd 五行代码真是太好了： 12345for(register int k=1;k&lt;=n;k++) for(register int i=1;i&lt;=n;i++) for(register int j=1;j&lt;=n;j++) if(map[i][k]+map[k][j]&lt;map[i][j]) map[i][j]=map[i][k]+map[k][j]; 在做题的过程中学了一些奇巧淫技： 比如： 多源一汇最短路径？存个反图跑SPFA: 死掉的SPFA也可以判负环：（代码摘自这里） 12345678910111213141516171819202122232425262728bool spfa(int n) &#123; int u, v; while (!q.empty()) q.pop(); memset(vis, false, sizeof(vis)); memset(in, 0, sizeof(in)); fill(d, d + n, oo); d[0] = 0; vis[0] = true; q.push(0); while (!q.empty()) &#123; u = q.front(); vis[u] = false; for (int i = prev[u]; i != -1; i = edge[i].next) &#123; v = edge[i].v; if (d[u] + edge[i].t &lt; d[v]) &#123; d[v] = d[u] + edge[i].t; if (!vis[v]) &#123; in[v] ++; if (in[v] &gt; n) return true; vis[v] = true; q.push(v); &#125; &#125; &#125; vis[u] = false; q.pop(); &#125; return false;&#125; 最短路讲完后是最小生成树，一样只是提了一下Prim，重点是Kruskal：使用了并查集，也非常好理解：直接给出代码实现： 123456789101112131415int find(int x)&#123;return fa[x]==x?x:find(fa[x]);&#125;bool merge(int x,int y)&#123; int xx=find(x);int yy=find(y); if(xx!=yy)&#123; fa[xx]=yy; return 1; &#125; return 0;&#125;for(register int i=1;i&lt;=m;i++)&#123; if(merge(s[i].x,s[i].y))&#123; sum+=s[i].w;cnt++; if(cnt==n-1) break; &#125;&#125; 非常好理解，于是讲的很快。 然后是TopSort（拓扑排序）：相当于是寻找InDegree=0的点，push，然后删除。 也很好理解。代码实现：(行吧这是课件上的代码我没看懂) 123456789101112131415161718192021bool TopologicalSort(DirectGraph &amp;g,vector&lt;int&gt;&amp;in_degree)&#123; queue&lt;int&gt;qu; int cnt=0; for(auto ite=in_degree.begin();ite !=in_degree.end();++ite)&#123; if(*ite==0)&#123; qu.push(*ite); &#125; &#125; while(!qu.empty())&#123; int v=qu.front(); qu.pop(); printf("%d ",v); cnt++; for(const int &amp;i:g.adj.at(v))&#123; if(0==--in_degree[i])&#123; qu.push(i); &#125; &#125; &#125; return cnt&gt;=v;&#125; 最后讲了树上倍增求LCA（该来的总是会来） 知识听懂了，但是实现过程看的稀里糊涂的，几乎强制在线 就像中国RMB一样，每次都尝试最大的${2^i \leq n}$，总能凑出LCA位置，毕竟${2^0 =1}$嘛。 晚上写了个Dijkstra+Heap的A+B Problem（我太咸了） 回酒店依然补剧… Day 5讲DP，本来满怀期待的，后来发现好多题以前都写过… 唯一值得一提的是01背包的原理又理解了一遍，比以前掌握的好多了。 Day 5没啥好写的。 Day 6又是考试日。也换老师了。 上午讲的STL，也没啥好写的，会的以前都会，不会的比如全排列，无非感叹很有用，然后会用了，也没什么好说，（所以这玩意真方便）。 下午的考试： 解压后看T1，看了看数据范围，觉得60pts打表能出，很稳，就开了Excel，写T1 Expected 60 5分钟写了暴力挂在那打表，开始看T2。 T2感觉没啥思路，打暴力的时候把dfs忘了（果然我还是不会dfs）~写了${O(n^3)}$的存图，然后T1还没跑完，很慌，关了exe，把源程序的20改成了10打表，打开一看： …… 直接撸快速幂，100到手。 表变成了这个 那个tip还是我手画了一棵树后验证的 实在想不出来，一脑抽，就把T1交了…… 然后看到群里的： 然后…. …… 不得不滚回去打T2了。 暴力写挂了…… T3依然不知道在讲什么。 所以考试算是半凉凉吧…… _Expected 160_ _Score=100_ 莫名rk3。 Day 7上午讲了历年的一些题。 听懂了xkdyh的玄学解法，也会了货币系统老凯的疑惑 心心念念的天天爱跑步没讲 直到Day 7我才知道原来课表里面没有KMP 然后就结束了。 突然想到要滚回去上whk了，对这个地方还是有点不舍。 挂几张照片吧。 Day inf卧在学校里，终于补了这篇游记的锅，虽然干货不多，但是知识点会慢慢写总结。 做该做的，才对的起自己。]]></content>
      <tags>
        <tag>游记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Templates]]></title>
    <url>%2F2019%2F01%2F27%2FTemplates%2F</url>
    <content type="text"><![CDATA[前言写给别人看，也为自己复习方便。 数据结构${Stack}$12345678910struct stack&#123; vector&lt;int&gt; v; int top; inline void init()&#123;top=0;&#125; inline void push(int x)&#123;v[++top]=x;&#125; inline void pop()&#123;if(top&gt;0)top--;&#125; inline bool empty()&#123;return top;&#125; inline int size()&#123;return top;&#125; inline int head()&#123;return v[top];&#125;&#125;; ${Queue}$1234567891011struct queue&#123; vector&lt;int&gt; q; int head,tail; inline void init()&#123;head=tail=0;&#125; inline void push(int x)&#123;q[++tail]=x;&#125; inline void pop()&#123;if(tail-head)head++;&#125; inline bool empty()&#123;return tail-head;&#125; inline int size()&#123;return tail-head;&#125; inline int front()&#123;if(head-tail)return q[head];&#125; inline int back()&#123;if(head-tail)return q[tail];&#125;&#125;; ${List}$12345678910111213141516171819int pre[maxn];int nxt[maxn];int val[maxn];inline void init()&#123; memset(pre,0,sizeof(pre)); memset(nxt,0,sizeof(nxt)); memset(val,0,sizeof(val));&#125;inline void ins(int a,int b,int c)//insert b between a and c&#123; nxt[b]=nxt[a]; pre[b]=pre[c]; nxt[a]=b; pre[c]=b;&#125;inline void del(int a)&#123; nxt[pre[a]]=nxt[a]; pre[nxt[a]]=pre[a];&#125; ${Union\;Find\;Set}$1234567891011struct union_find_set&#123; vector&lt;int&gt;fa;vector&lt;int&gt;size; inline void init(int n)&#123;for(register int i=1;i&lt;=n;i++)&#123;fa[i]=i;size[i]=1;&#125;&#125; inline int find(int x)&#123;return fa[x]==x?x:find(fa[x]);&#125; inline void merge(int x,int y)&#123; int xx=find(x);int yy=find(y); if(size[xx]&gt;size[yy])swap(xx,yy); fa[xx]=yy; size[xx]+=size[yy]; &#125;&#125;; ${Segment\;Tree}$1234567891011121314151617181920212223242526272829303132#include&lt;cstdio&gt;#define lson a&lt;&lt;1#define rson a&lt;&lt;1|1#define mid (l+r)&gt;&gt;1#define maxn 500010int a[maxn],upv[maxn];struct SegmentTree&#123; int t[maxn&lt;&lt;2]; inline void build(int l,int r,int a)&#123; if(l==r)&#123;t[a]=a[l];return;&#125; build(l,mid,lson); build(mid+1,r,rson); t[a]=t[lson]+t[rson]; &#125; inline void down(int l,int r,int a)&#123; t[lson]+=upv[a]*(mid-l+1);upv[lson]+=upv[a]; t[rson]+=upv[a]*(r-mid);upv[rson]+=upv[a]; upv[a]=0; &#125; inline void up(int l,int r,int ll,int rr,int a,int v)&#123; if(r&lt;ll||l&gt;rr) return; if(l&gt;=ll&amp;&amp;r&lt;=rr)&#123;sum+=(r-l+1)*v;upv[a]+=v;return;&#125; if(upv[a]) down(l,r,a); up(l,mid,ll,rr,lson,v); up(mid+1,r,ll,rr,rson,v); sum[a]=sum[lson]+sum[rson]; inline void getsum(int l,int r,int ll,int rr,int a)&#123; if(r&lt;ll||l&gt;rr) return; if(l&gt;ll&amp;&amp;r&lt;rr)&#123;ans+=sum[a];return;&#125; if(upv[a])down(l,r,a); getsum(l,mid,ll,rr,lson);getsum(mid+1,r,ll,rr,rson); sum[a]=sum[lson]+sum[rson]; &#125;&#125;; 算法图论${Dijkstra+Heap}$1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#include&lt;queue&gt;#include&lt;vector&gt;#define MaxN 100010#define MaxM 500010#define inf 0x7fffffffusing namespace std;struct edge&#123; int to,dist,next;&#125;e[MaxM];int head[MaxN]=&#123;&#125;,dist[MaxN]=&#123;&#125;,cnt=0;bool vis[MaxN]=&#123;&#125;;int n,m,s;inline void AddEdge(int u,int v,int val)&#123; e[++cnt].dist=val; e[cnt].to=v; e[cnt].next=head[u]; head[u]=cnt;&#125;struct node&#123; int dist; int post; bool operator &lt;(const node &amp;lxl)const&#123; return lxl.dist&lt;dist; &#125;&#125;;priority_queue&lt;node&gt; q;inline void dijkstra(void)&#123; dist[s] = 0; q.push((node)&#123;0,s&#125;); while(!q.empty()) &#123; node tmp=q.top(); q.pop(); int x=tmp.post,d=tmp.dist; if(vis[x]) continue; vis[x]=true; for(int i=head[x];i;i=e[i].next) &#123; int y=e[i].to; if(dist[y]&gt;dist[x]+e[i].dist) &#123; dist[y]=dist[x]+e[i].dist; if(!vis[y]) &#123; q.push((node)&#123;dist[y],y&#125;); &#125; &#125; &#125; &#125;&#125;int main(void)&#123; scanf("%d%d%d",&amp;n,&amp;m,&amp;s); for(int i=1;i&lt;=n;i++)dist[i]=inf; for(int i=0;i&lt;m;i++)&#123; int u,v,d; scanf("%d%d%d",&amp;u,&amp;v,&amp;d); AddEdge(u,v,d); &#125; dijkstra(); for(int i=1;i&lt;=n;i++) printf("%d ",dist[i]); return 0;&#125; 数论乘法逆元 $({Exgcd})$1234void exgcd(ll a,ll b,ll &amp;x,ll &amp;y) &#123; if (!b) x=1,y=0; else exgcd(b,a%b,y,x),y-=a/b*x;&#125; 埃氏筛12345678910111213bool IsPrime[range+1];void set(bool IsPrime[])&#123; int i,j; for(i=0;i&lt;=range;++i) IsPrime[i]=true; IsPrime[0]=IsPrime[1]=false; for(i=2;i&lt;=range;++i)&#123; if(IsPrime[i])&#123; for(j=2*i;j&lt;=range;j+=i) IsPrime[j]=false; &#125; &#125;&#125; 基础算法分治二分(左开右闭)123456789int lower_bound(int a[],int n,int x)&#123; int l=0,r=n; while(l+1&lt;r)&#123; int mid=(l+r)/2; if(a[mid]&gt;=x) r=mid; else l=mid; &#125; return l;&#125; 快速幂12345678910#define ll long longint lxx(ll bb,ll pp,ll kk)&#123; ll b=bb,p=pp,k=kk,ans=1; while(p&gt;1)&#123; if(p%2)ans=(ans%k)*(b%k)%k; p&gt;&gt;=1; b=(b%k)*(b%k)%k; &#125; return ans*=(b%k)%k;&#125; 三分12345678910111213141516171819202122232425262728#include&lt;cstdio&gt;#include&lt;iostream&gt;const double eps=1e-8;double t[999];int n;double getmid(double x)&#123; double y=0; for(int i=1;i&lt;=n+1;i++)&#123; double yx=t[i]; for(int j=1;j&lt;i;j++) yx*=x; y+=yx; &#125; return y;&#125;int main()&#123; double l,r; scanf("%d%lf%lf",&amp;n,&amp;l,&amp;r); for(int i=n+1;i&gt;=1;i--) scanf("%lf",&amp;t[i]); while(l+eps&lt;r)&#123; double mid1=(l+r)/2.0; double mid2=(mid1+r)/2.0; if(getmid(mid1)&gt;getmid(mid2)) r=mid2; else l=mid1; &#125; printf("%d\n",l); return 0;&#125; 排序快速排序123456789101112131415161718void qsort(int l,int r)&#123; int i,j,mid,p; i=l;j=r; mid=a[(l+r)/2]; do&#123; while(a[i]&lt;=mid)i++; while(a[j]&gt;=mid)j--; if(i&lt;=j)&#123; p=a[i]; a[i]=a[j]; a[j]=p; i++; j--; &#125; &#125;while(i&lt;=j); if(l&lt;j)qsort(l,j); if(i&lt;r)qsort(i,r);&#125; 堆排序123456789101112131415161718#include&lt;cstdio&gt;#include&lt;queue&gt;#include&lt;vector&gt;using namespace std;priority_queue&lt; int , vector&lt; int &gt; , greater&lt;int&gt; &gt; q;int main()&#123; int n,x; scanf("%d",&amp;n); for(register int i=1;i&lt;=n;i++)&#123; scanf("%d",&amp;x); q.push(x); &#125; while(!q.empty())&#123; printf("%d ",q.top()); q.pop(); &#125; return 0;&#125; 玄学优化${FastIO}$1234567891011121314151617#include&lt;cstdio&gt;namespace FastIO&#123; inline int read()&#123; int s=0,w=1; char ch=getchar(); while(ch&lt;='0'||ch&gt;'9')&#123;if(ch=='-')w=-1;ch=getchar();&#125; while(ch&gt;='0'&amp;&amp;ch&lt;='9') s=s*10+ch-'0',ch=getchar(); return s*w; &#125; inline void write(int x)&#123; if(x&lt;0) putchar('-'),x=-x; if(x&gt;9) write(x/10); putchar(x%10+'0'); &#125;&#125;#define read() FastIO::read()#define write(x) FastIO::write(x) 质数表(打了个1e9来着，粘贴的时候卡死了)1int prime[9592]=&#123;2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,1327,1361,1367,1373,1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,1459,1471,1481,1483,1487,1489,1493,1499,1511,1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,1601,1607,1609,1613,1619,1621,1627,1637,1657,1663,1667,1669,1693,1697,1699,1709,1721,1723,1733,1741,1747,1753,1759,1777,1783,1787,1789,1801,1811,1823,1831,1847,1861,1867,1871,1873,1877,1879,1889,1901,1907,1913,1931,1933,1949,1951,1973,1979,1987,1993,1997,1999,2003,2011,2017,2027,2029,2039,2053,2063,2069,2081,2083,2087,2089,2099,2111,2113,2129,2131,2137,2141,2143,2153,2161,2179,2203,2207,2213,2221,2237,2239,2243,2251,2267,2269,2273,2281,2287,2293,2297,2309,2311,2333,2339,2341,2347,2351,2357,2371,2377,2381,2383,2389,2393,2399,2411,2417,2423,2437,2441,2447,2459,2467,2473,2477,2503,2521,2531,2539,2543,2549,2551,2557,2579,2591,2593,2609,2617,2621,2633,2647,2657,2659,2663,2671,2677,2683,2687,2689,2693,2699,2707,2711,2713,2719,2729,2731,2741,2749,2753,2767,2777,2789,2791,2797,2801,2803,2819,2833,2837,2843,2851,2857,2861,2879,2887,2897,2903,2909,2917,2927,2939,2953,2957,2963,2969,2971,2999,3001,3011,3019,3023,3037,3041,3049,3061,3067,3079,3083,3089,3109,3119,3121,3137,3163,3167,3169,3181,3187,3191,3203,3209,3217,3221,3229,3251,3253,3257,3259,3271,3299,3301,3307,3313,3319,3323,3329,3331,3343,3347,3359,3361,3371,3373,3389,3391,3407,3413,3433,3449,3457,3461,3463,3467,3469,3491,3499,3511,3517,3527,3529,3533,3539,3541,3547,3557,3559,3571,3581,3583,3593,3607,3613,3617,3623,3631,3637,3643,3659,3671,3673,3677,3691,3697,3701,3709,3719,3727,3733,3739,3761,3767,3769,3779,3793,3797,3803,3821,3823,3833,3847,3851,3853,3863,3877,3881,3889,3907,3911,3917,3919,3923,3929,3931,3943,3947,3967,3989,4001,4003,4007,4013,4019,4021,4027,4049,4051,4057,4073,4079,4091,4093,4099,4111,4127,4129,4133,4139,4153,4157,4159,4177,4201,4211,4217,4219,4229,4231,4241,4243,4253,4259,4261,4271,4273,4283,4289,4297,4327,4337,4339,4349,4357,4363,4373,4391,4397,4409,4421,4423,4441,4447,4451,4457,4463,4481,4483,4493,4507,4513,4517,4519,4523,4547,4549,4561,4567,4583,4591,4597,4603,4621,4637,4639,4643,4649,4651,4657,4663,4673,4679,4691,4703,4721,4723,4729,4733,4751,4759,4783,4787,4789,4793,4799,4801,4813,4817,4831,4861,4871,4877,4889,4903,4909,4919,4931,4933,4937,4943,4951,4957,4967,4969,4973,4987,4993,4999,5003,5009,5011,5021,5023,5039,5051,5059,5077,5081,5087,5099,5101,5107,5113,5119,5147,5153,5167,5171,5179,5189,5197,5209,5227,5231,5233,5237,5261,5273,5279,5281,5297,5303,5309,5323,5333,5347,5351,5381,5387,5393,5399,5407,5413,5417,5419,5431,5437,5441,5443,5449,5471,5477,5479,5483,5501,5503,5507,5519,5521,5527,5531,5557,5563,5569,5573,5581,5591,5623,5639,5641,5647,5651,5653,5657,5659,5669,5683,5689,5693,5701,5711,5717,5737,5741,5743,5749,5779,5783,5791,5801,5807,5813,5821,5827,5839,5843,5849,5851,5857,5861,5867,5869,5879,5881,5897,5903,5923,5927,5939,5953,5981,5987,6007,6011,6029,6037,6043,6047,6053,6067,6073,6079,6089,6091,6101,6113,6121,6131,6133,6143,6151,6163,6173,6197,6199,6203,6211,6217,6221,6229,6247,6257,6263,6269,6271,6277,6287,6299,6301,6311,6317,6323,6329,6337,6343,6353,6359,6361,6367,6373,6379,6389,6397,6421,6427,6449,6451,6469,6473,6481,6491,6521,6529,6547,6551,6553,6563,6569,6571,6577,6581,6599,6607,6619,6637,6653,6659,6661,6673,6679,6689,6691,6701,6703,6709,6719,6733,6737,6761,6763,6779,6781,6791,6793,6803,6823,6827,6829,6833,6841,6857,6863,6869,6871,6883,6899,6907,6911,6917,6947,6949,6959,6961,6967,6971,6977,6983,6991,6997,7001,7013,7019,7027,7039,7043,7057,7069,7079,7103,7109,7121,7127,7129,7151,7159,7177,7187,7193,7207,7211,7213,7219,7229,7237,7243,7247,7253,7283,7297,7307,7309,7321,7331,7333,7349,7351,7369,7393,7411,7417,7433,7451,7457,7459,7477,7481,7487,7489,7499,7507,7517,7523,7529,7537,7541,7547,7549,7559,7561,7573,7577,7583,7589,7591,7603,7607,7621,7639,7643,7649,7669,7673,7681,7687,7691,7699,7703,7717,7723,7727,7741,7753,7757,7759,7789,7793,7817,7823,7829,7841,7853,7867,7873,7877,7879,7883,7901,7907,7919,7927,7933,7937,7949,7951,7963,7993,8009,8011,8017,8039,8053,8059,8069,8081,8087,8089,8093,8101,8111,8117,8123,8147,8161,8167,8171,8179,8191,8209,8219,8221,8231,8233,8237,8243,8263,8269,8273,8287,8291,8293,8297,8311,8317,8329,8353,8363,8369,8377,8387,8389,8419,8423,8429,8431,8443,8447,8461,8467,8501,8513,8521,8527,8537,8539,8543,8563,8573,8581,8597,8599,8609,8623,8627,8629,8641,8647,8663,8669,8677,8681,8689,8693,8699,8707,8713,8719,8731,8737,8741,8747,8753,8761,8779,8783,8803,8807,8819,8821,8831,8837,8839,8849,8861,8863,8867,8887,8893,8923,8929,8933,8941,8951,8963,8969,8971,8999,9001,9007,9011,9013,9029,9041,9043,9049,9059,9067,9091,9103,9109,9127,9133,9137,9151,9157,9161,9173,9181,9187,9199,9203,9209,9221,9227,9239,9241,9257,9277,9281,9283,9293,9311,9319,9323,9337,9341,9343,9349,9371,9377,9391,9397,9403,9413,9419,9421,9431,9433,9437,9439,9461,9463,9467,9473,9479,9491,9497,9511,9521,9533,9539,9547,9551,9587,9601,9613,9619,9623,9629,9631,9643,9649,9661,9677,9679,9689,9697,9719,9721,9733,9739,9743,9749,9767,9769,9781,9787,9791,9803,9811,9817,9829,9833,9839,9851,9857,9859,9871,9883,9887,9901,9907,9923,9929,9931,9941,9949,9967,9973,10007,10009,10037,10039,10061,10067,10069,10079,10091,10093,10099,10103,10111,10133,10139,10141,10151,10159,10163,10169,10177,10181,10193,10211,10223,10243,10247,10253,10259,10267,10271,10273,10289,10301,10303,10313,10321,10331,10333,10337,10343,10357,10369,10391,10399,10427,10429,10433,10453,10457,10459,10463,10477,10487,10499,10501,10513,10529,10531,10559,10567,10589,10597,10601,10607,10613,10627,10631,10639,10651,10657,10663,10667,10687,10691,10709,10711,10723,10729,10733,10739,10753,10771,10781,10789,10799,10831,10837,10847,10853,10859,10861,10867,10883,10889,10891,10903,10909,10937,10939,10949,10957,10973,10979,10987,10993,11003,11027,11047,11057,11059,11069,11071,11083,11087,11093,11113,11117,11119,11131,11149,11159,11161,11171,11173,11177,11197,11213,11239,11243,11251,11257,11261,11273,11279,11287,11299,11311,11317,11321,11329,11351,11353,11369,11383,11393,11399,11411,11423,11437,11443,11447,11467,11471,11483,11489,11491,11497,11503,11519,11527,11549,11551,11579,11587,11593,11597,11617,11621,11633,11657,11677,11681,11689,11699,11701,11717,11719,11731,11743,11777,11779,11783,11789,11801,11807,11813,11821,11827,11831,11833,11839,11863,11867,11887,11897,11903,11909,11923,11927,11933,11939,11941,11953,11959,11969,11971,11981,11987,12007,12011,12037,12041,12043,12049,12071,12073,12097,12101,12107,12109,12113,12119,12143,12149,12157,12161,12163,12197,12203,12211,12227,12239,12241,12251,12253,12263,12269,12277,12281,12289,12301,12323,12329,12343,12347,12373,12377,12379,12391,12401,12409,12413,12421,12433,12437,12451,12457,12473,12479,12487,12491,12497,12503,12511,12517,12527,12539,12541,12547,12553,12569,12577,12583,12589,12601,12611,12613,12619,12637,12641,12647,12653,12659,12671,12689,12697,12703,12713,12721,12739,12743,12757,12763,12781,12791,12799,12809,12821,12823,12829,12841,12853,12889,12893,12899,12907,12911,12917,12919,12923,12941,12953,12959,12967,12973,12979,12983,13001,13003,13007,13009,13033,13037,13043,13049,13063,13093,13099,13103,13109,13121,13127,13147,13151,13159,13163,13171,13177,13183,13187,13217,13219,13229,13241,13249,13259,13267,13291,13297,13309,13313,13327,13331,13337,13339,13367,13381,13397,13399,13411,13417,13421,13441,13451,13457,13463,13469,13477,13487,13499,13513,13523,13537,13553,13567,13577,13591,13597,13613,13619,13627,13633,13649,13669,13679,13681,13687,13691,13693,13697,13709,13711,13721,13723,13729,13751,13757,13759,13763,13781,13789,13799,13807,13829,13831,13841,13859,13873,13877,13879,13883,13901,13903,13907,13913,13921,13931,13933,13963,13967,13997,13999,14009,14011,14029,14033,14051,14057,14071,14081,14083,14087,14107,14143,14149,14153,14159,14173,14177,14197,14207,14221,14243,14249,14251,14281,14293,14303,14321,14323,14327,14341,14347,14369,14387,14389,14401,14407,14411,14419,14423,14431,14437,14447,14449,14461,14479,14489,14503,14519,14533,14537,14543,14549,14551,14557,14561,14563,14591,14593,14621,14627,14629,14633,14639,14653,14657,14669,14683,14699,14713,14717,14723,14731,14737,14741,14747,14753,14759,14767,14771,14779,14783,14797,14813,14821,14827,14831,14843,14851,14867,14869,14879,14887,14891,14897,14923,14929,14939,14947,14951,14957,14969,14983,15013,15017,15031,15053,15061,15073,15077,15083,15091,15101,15107,15121,15131,15137,15139,15149,15161,15173,15187,15193,15199,15217,15227,15233,15241,15259,15263,15269,15271,15277,15287,15289,15299,15307,15313,15319,15329,15331,15349,15359,15361,15373,15377,15383,15391,15401,15413,15427,15439,15443,15451,15461,15467,15473,15493,15497,15511,15527,15541,15551,15559,15569,15581,15583,15601,15607,15619,15629,15641,15643,15647,15649,15661,15667,15671,15679,15683,15727,15731,15733,15737,15739,15749,15761,15767,15773,15787,15791,15797,15803,15809,15817,15823,15859,15877,15881,15887,15889,15901,15907,15913,15919,15923,15937,15959,15971,15973,15991,16001,16007,16033,16057,16061,16063,16067,16069,16073,16087,16091,16097,16103,16111,16127,16139,16141,16183,16187,16189,16193,16217,16223,16229,16231,16249,16253,16267,16273,16301,16319,16333,16339,16349,16361,16363,16369,16381,16411,16417,16421,16427,16433,16447,16451,16453,16477,16481,16487,16493,16519,16529,16547,16553,16561,16567,16573,16603,16607,16619,16631,16633,16649,16651,16657,16661,16673,16691,16693,16699,16703,16729,16741,16747,16759,16763,16787,16811,16823,16829,16831,16843,16871,16879,16883,16889,16901,16903,16921,16927,16931,16937,16943,16963,16979,16981,16987,16993,17011,17021,17027,17029,17033,17041,17047,17053,17077,17093,17099,17107,17117,17123,17137,17159,17167,17183,17189,17191,17203,17207,17209,17231,17239,17257,17291,17293,17299,17317,17321,17327,17333,17341,17351,17359,17377,17383,17387,17389,17393,17401,17417,17419,17431,17443,17449,17467,17471,17477,17483,17489,17491,17497,17509,17519,17539,17551,17569,17573,17579,17581,17597,17599,17609,17623,17627,17657,17659,17669,17681,17683,17707,17713,17729,17737,17747,17749,17761,17783,17789,17791,17807,17827,17837,17839,17851,17863,17881,17891,17903,17909,17911,17921,17923,17929,17939,17957,17959,17971,17977,17981,17987,17989,18013,18041,18043,18047,18049,18059,18061,18077,18089,18097,18119,18121,18127,18131,18133,18143,18149,18169,18181,18191,18199,18211,18217,18223,18229,18233,18251,18253,18257,18269,18287,18289,18301,18307,18311,18313,18329,18341,18353,18367,18371,18379,18397,18401,18413,18427,18433,18439,18443,18451,18457,18461,18481,18493,18503,18517,18521,18523,18539,18541,18553,18583,18587,18593,18617,18637,18661,18671,18679,18691,18701,18713,18719,18731,18743,18749,18757,18773,18787,18793,18797,18803,18839,18859,18869,18899,18911,18913,18917,18919,18947,18959,18973,18979,19001,19009,19013,19031,19037,19051,19069,19073,19079,19081,19087,19121,19139,19141,19157,19163,19181,19183,19207,19211,19213,19219,19231,19237,19249,19259,19267,19273,19289,19301,19309,19319,19333,19373,19379,19381,19387,19391,19403,19417,19421,19423,19427,19429,19433,19441,19447,19457,19463,19469,19471,19477,19483,19489,19501,19507,19531,19541,19543,19553,19559,19571,19577,19583,19597,19603,19609,19661,19681,19687,19697,19699,19709,19717,19727,19739,19751,19753,19759,19763,19777,19793,19801,19813,19819,19841,19843,19853,19861,19867,19889,19891,19913,19919,19927,19937,19949,19961,19963,19973,19979,19991,19993,19997,20011,20021,20023,20029,20047,20051,20063,20071,20089,20101,20107,20113,20117,20123,20129,20143,20147,20149,20161,20173,20177,20183,20201,20219,20231,20233,20249,20261,20269,20287,20297,20323,20327,20333,20341,20347,20353,20357,20359,20369,20389,20393,20399,20407,20411,20431,20441,20443,20477,20479,20483,20507,20509,20521,20533,20543,20549,20551,20563,20593,20599,20611,20627,20639,20641,20663,20681,20693,20707,20717,20719,20731,20743,20747,20749,20753,20759,20771,20773,20789,20807,20809,20849,20857,20873,20879,20887,20897,20899,20903,20921,20929,20939,20947,20959,20963,20981,20983,21001,21011,21013,21017,21019,21023,21031,21059,21061,21067,21089,21101,21107,21121,21139,21143,21149,21157,21163,21169,21179,21187,21191,21193,21211,21221,21227,21247,21269,21277,21283,21313,21317,21319,21323,21341,21347,21377,21379,21383,21391,21397,21401,21407,21419,21433,21467,21481,21487,21491,21493,21499,21503,21517,21521,21523,21529,21557,21559,21563,21569,21577,21587,21589,21599,21601,21611,21613,21617,21647,21649,21661,21673,21683,21701,21713,21727,21737,21739,21751,21757,21767,21773,21787,21799,21803,21817,21821,21839,21841,21851,21859,21863,21871,21881,21893,21911,21929,21937,21943,21961,21977,21991,21997,22003,22013,22027,22031,22037,22039,22051,22063,22067,22073,22079,22091,22093,22109,22111,22123,22129,22133,22147,22153,22157,22159,22171,22189,22193,22229,22247,22259,22271,22273,22277,22279,22283,22291,22303,22307,22343,22349,22367,22369,22381,22391,22397,22409,22433,22441,22447,22453,22469,22481,22483,22501,22511,22531,22541,22543,22549,22567,22571,22573,22613,22619,22621,22637,22639,22643,22651,22669,22679,22691,22697,22699,22709,22717,22721,22727,22739,22741,22751,22769,22777,22783,22787,22807,22811,22817,22853,22859,22861,22871,22877,22901,22907,22921,22937,22943,22961,22963,22973,22993,23003,23011,23017,23021,23027,23029,23039,23041,23053,23057,23059,23063,23071,23081,23087,23099,23117,23131,23143,23159,23167,23173,23189,23197,23201,23203,23209,23227,23251,23269,23279,23291,23293,23297,23311,23321,23327,23333,23339,23357,23369,23371,23399,23417,23431,23447,23459,23473,23497,23509,23531,23537,23539,23549,23557,23561,23563,23567,23581,23593,23599,23603,23609,23623,23627,23629,23633,23663,23669,23671,23677,23687,23689,23719,23741,23743,23747,23753,23761,23767,23773,23789,23801,23813,23819,23827,23831,23833,23857,23869,23873,23879,23887,23893,23899,23909,23911,23917,23929,23957,23971,23977,23981,23993,24001,24007,24019,24023,24029,24043,24049,24061,24071,24077,24083,24091,24097,24103,24107,24109,24113,24121,24133,24137,24151,24169,24179,24181,24197,24203,24223,24229,24239,24247,24251,24281,24317,24329,24337,24359,24371,24373,24379,24391,24407,24413,24419,24421,24439,24443,24469,24473,24481,24499,24509,24517,24527,24533,24547,24551,24571,24593,24611,24623,24631,24659,24671,24677,24683,24691,24697,24709,24733,24749,24763,24767,24781,24793,24799,24809,24821,24841,24847,24851,24859,24877,24889,24907,24917,24919,24923,24943,24953,24967,24971,24977,24979,24989,25013,25031,25033,25037,25057,25073,25087,25097,25111,25117,25121,25127,25147,25153,25163,25169,25171,25183,25189,25219,25229,25237,25243,25247,25253,25261,25301,25303,25307,25309,25321,25339,25343,25349,25357,25367,25373,25391,25409,25411,25423,25439,25447,25453,25457,25463,25469,25471,25523,25537,25541,25561,25577,25579,25583,25589,25601,25603,25609,25621,25633,25639,25643,25657,25667,25673,25679,25693,25703,25717,25733,25741,25747,25759,25763,25771,25793,25799,25801,25819,25841,25847,25849,25867,25873,25889,25903,25913,25919,25931,25933,25939,25943,25951,25969,25981,25997,25999,26003,26017,26021,26029,26041,26053,26083,26099,26107,26111,26113,26119,26141,26153,26161,26171,26177,26183,26189,26203,26209,26227,26237,26249,26251,26261,26263,26267,26293,26297,26309,26317,26321,26339,26347,26357,26371,26387,26393,26399,26407,26417,26423,26431,26437,26449,26459,26479,26489,26497,26501,26513,26539,26557,26561,26573,26591,26597,26627,26633,26641,26647,26669,26681,26683,26687,26693,26699,26701,26711,26713,26717,26723,26729,26731,26737,26759,26777,26783,26801,26813,26821,26833,26839,26849,26861,26863,26879,26881,26891,26893,26903,26921,26927,26947,26951,26953,26959,26981,26987,26993,27011,27017,27031,27043,27059,27061,27067,27073,27077,27091,27103,27107,27109,27127,27143,27179,27191,27197,27211,27239,27241,27253,27259,27271,27277,27281,27283,27299,27329,27337,27361,27367,27397,27407,27409,27427,27431,27437,27449,27457,27479,27481,27487,27509,27527,27529,27539,27541,27551,27581,27583,27611,27617,27631,27647,27653,27673,27689,27691,27697,27701,27733,27737,27739,27743,27749,27751,27763,27767,27773,27779,27791,27793,27799,27803,27809,27817,27823,27827,27847,27851,27883,27893,27901,27917,27919,27941,27943,27947,27953,27961,27967,27983,27997,28001,28019,28027,28031,28051,28057,28069,28081,28087,28097,28099,28109,28111,28123,28151,28163,28181,28183,28201,28211,28219,28229,28277,28279,28283,28289,28297,28307,28309,28319,28349,28351,28387,28393,28403,28409,28411,28429,28433,28439,28447,28463,28477,28493,28499,28513,28517,28537,28541,28547,28549,28559,28571,28573,28579,28591,28597,28603,28607,28619,28621,28627,28631,28643,28649,28657,28661,28663,28669,28687,28697,28703,28711,28723,28729,28751,28753,28759,28771,28789,28793,28807,28813,28817,28837,28843,28859,28867,28871,28879,28901,28909,28921,28927,28933,28949,28961,28979,29009,29017,29021,29023,29027,29033,29059,29063,29077,29101,29123,29129,29131,29137,29147,29153,29167,29173,29179,29191,29201,29207,29209,29221,29231,29243,29251,29269,29287,29297,29303,29311,29327,29333,29339,29347,29363,29383,29387,29389,29399,29401,29411,29423,29429,29437,29443,29453,29473,29483,29501,29527,29531,29537,29567,29569,29573,29581,29587,29599,29611,29629,29633,29641,29663,29669,29671,29683,29717,29723,29741,29753,29759,29761,29789,29803,29819,29833,29837,29851,29863,29867,29873,29879,29881,29917,29921,29927,29947,29959,29983,29989,30011,30013,30029,30047,30059,30071,30089,30091,30097,30103,30109,30113,30119,30133,30137,30139,30161,30169,30181,30187,30197,30203,30211,30223,30241,30253,30259,30269,30271,30293,30307,30313,30319,30323,30341,30347,30367,30389,30391,30403,30427,30431,30449,30467,30469,30491,30493,30497,30509,30517,30529,30539,30553,30557,30559,30577,30593,30631,30637,30643,30649,30661,30671,30677,30689,30697,30703,30707,30713,30727,30757,30763,30773,30781,30803,30809,30817,30829,30839,30841,30851,30853,30859,30869,30871,30881,30893,30911,30931,30937,30941,30949,30971,30977,30983,31013,31019,31033,31039,31051,31063,31069,31079,31081,31091,31121,31123,31139,31147,31151,31153,31159,31177,31181,31183,31189,31193,31219,31223,31231,31237,31247,31249,31253,31259,31267,31271,31277,31307,31319,31321,31327,31333,31337,31357,31379,31387,31391,31393,31397,31469,31477,31481,31489,31511,31513,31517,31531,31541,31543,31547,31567,31573,31583,31601,31607,31627,31643,31649,31657,31663,31667,31687,31699,31721,31723,31727,31729,31741,31751,31769,31771,31793,31799,31817,31847,31849,31859,31873,31883,31891,31907,31957,31963,31973,31981,31991,32003,32009,32027,32029,32051,32057,32059,32063,32069,32077,32083,32089,32099,32117,32119,32141,32143,32159,32173,32183,32189,32191,32203,32213,32233,32237,32251,32257,32261,32297,32299,32303,32309,32321,32323,32327,32341,32353,32359,32363,32369,32371,32377,32381,32401,32411,32413,32423,32429,32441,32443,32467,32479,32491,32497,32503,32507,32531,32533,32537,32561,32563,32569,32573,32579,32587,32603,32609,32611,32621,32633,32647,32653,32687,32693,32707,32713,32717,32719,32749,32771,32779,32783,32789,32797,32801,32803,32831,32833,32839,32843,32869,32887,32909,32911,32917,32933,32939,32941,32957,32969,32971,32983,32987,32993,32999,33013,33023,33029,33037,33049,33053,33071,33073,33083,33091,33107,33113,33119,33149,33151,33161,33179,33181,33191,33199,33203,33211,33223,33247,33287,33289,33301,33311,33317,33329,33331,33343,33347,33349,33353,33359,33377,33391,33403,33409,33413,33427,33457,33461,33469,33479,33487,33493,33503,33521,33529,33533,33547,33563,33569,33577,33581,33587,33589,33599,33601,33613,33617,33619,33623,33629,33637,33641,33647,33679,33703,33713,33721,33739,33749,33751,33757,33767,33769,33773,33791,33797,33809,33811,33827,33829,33851,33857,33863,33871,33889,33893,33911,33923,33931,33937,33941,33961,33967,33997,34019,34031,34033,34039,34057,34061,34123,34127,34129,34141,34147,34157,34159,34171,34183,34211,34213,34217,34231,34253,34259,34261,34267,34273,34283,34297,34301,34303,34313,34319,34327,34337,34351,34361,34367,34369,34381,34403,34421,34429,34439,34457,34469,34471,34483,34487,34499,34501,34511,34513,34519,34537,34543,34549,34583,34589,34591,34603,34607,34613,34631,34649,34651,34667,34673,34679,34687,34693,34703,34721,34729,34739,34747,34757,34759,34763,34781,34807,34819,34841,34843,34847,34849,34871,34877,34883,34897,34913,34919,34939,34949,34961,34963,34981,35023,35027,35051,35053,35059,35069,35081,35083,35089,35099,35107,35111,35117,35129,35141,35149,35153,35159,35171,35201,35221,35227,35251,35257,35267,35279,35281,35291,35311,35317,35323,35327,35339,35353,35363,35381,35393,35401,35407,35419,35423,35437,35447,35449,35461,35491,35507,35509,35521,35527,35531,35533,35537,35543,35569,35573,35591,35593,35597,35603,35617,35671,35677,35729,35731,35747,35753,35759,35771,35797,35801,35803,35809,35831,35837,35839,35851,35863,35869,35879,35897,35899,35911,35923,35933,35951,35963,35969,35977,35983,35993,35999,36007,36011,36013,36017,36037,36061,36067,36073,36083,36097,36107,36109,36131,36137,36151,36161,36187,36191,36209,36217,36229,36241,36251,36263,36269,36277,36293,36299,36307,36313,36319,36341,36343,36353,36373,36383,36389,36433,36451,36457,36467,36469,36473,36479,36493,36497,36523,36527,36529,36541,36551,36559,36563,36571,36583,36587,36599,36607,36629,36637,36643,36653,36671,36677,36683,36691,36697,36709,36713,36721,36739,36749,36761,36767,36779,36781,36787,36791,36793,36809,36821,36833,36847,36857,36871,36877,36887,36899,36901,36913,36919,36923,36929,36931,36943,36947,36973,36979,36997,37003,37013,37019,37021,37039,37049,37057,37061,37087,37097,37117,37123,37139,37159,37171,37181,37189,37199,37201,37217,37223,37243,37253,37273,37277,37307,37309,37313,37321,37337,37339,37357,37361,37363,37369,37379,37397,37409,37423,37441,37447,37463,37483,37489,37493,37501,37507,37511,37517,37529,37537,37547,37549,37561,37567,37571,37573,37579,37589,37591,37607,37619,37633,37643,37649,37657,37663,37691,37693,37699,37717,37747,37781,37783,37799,37811,37813,37831,37847,37853,37861,37871,37879,37889,37897,37907,37951,37957,37963,37967,37987,37991,37993,37997,38011,38039,38047,38053,38069,38083,38113,38119,38149,38153,38167,38177,38183,38189,38197,38201,38219,38231,38237,38239,38261,38273,38281,38287,38299,38303,38317,38321,38327,38329,38333,38351,38371,38377,38393,38431,38447,38449,38453,38459,38461,38501,38543,38557,38561,38567,38569,38593,38603,38609,38611,38629,38639,38651,38653,38669,38671,38677,38693,38699,38707,38711,38713,38723,38729,38737,38747,38749,38767,38783,38791,38803,38821,38833,38839,38851,38861,38867,38873,38891,38903,38917,38921,38923,38933,38953,38959,38971,38977,38993,39019,39023,39041,39043,39047,39079,39089,39097,39103,39107,39113,39119,39133,39139,39157,39161,39163,39181,39191,39199,39209,39217,39227,39229,39233,39239,39241,39251,39293,39301,39313,39317,39323,39341,39343,39359,39367,39371,39373,39383,39397,39409,39419,39439,39443,39451,39461,39499,39503,39509,39511,39521,39541,39551,39563,39569,39581,39607,39619,39623,39631,39659,39667,39671,39679,39703,39709,39719,39727,39733,39749,39761,39769,39779,39791,39799,39821,39827,39829,39839,39841,39847,39857,39863,39869,39877,39883,39887,39901,39929,39937,39953,39971,39979,39983,39989,40009,40013,40031,40037,40039,40063,40087,40093,40099,40111,40123,40127,40129,40151,40153,40163,40169,40177,40189,40193,40213,40231,40237,40241,40253,40277,40283,40289,40343,40351,40357,40361,40387,40423,40427,40429,40433,40459,40471,40483,40487,40493,40499,40507,40519,40529,40531,40543,40559,40577,40583,40591,40597,40609,40627,40637,40639,40693,40697,40699,40709,40739,40751,40759,40763,40771,40787,40801,40813,40819,40823,40829,40841,40847,40849,40853,40867,40879,40883,40897,40903,40927,40933,40939,40949,40961,40973,40993,41011,41017,41023,41039,41047,41051,41057,41077,41081,41113,41117,41131,41141,41143,41149,41161,41177,41179,41183,41189,41201,41203,41213,41221,41227,41231,41233,41243,41257,41263,41269,41281,41299,41333,41341,41351,41357,41381,41387,41389,41399,41411,41413,41443,41453,41467,41479,41491,41507,41513,41519,41521,41539,41543,41549,41579,41593,41597,41603,41609,41611,41617,41621,41627,41641,41647,41651,41659,41669,41681,41687,41719,41729,41737,41759,41761,41771,41777,41801,41809,41813,41843,41849,41851,41863,41879,41887,41893,41897,41903,41911,41927,41941,41947,41953,41957,41959,41969,41981,41983,41999,42013,42017,42019,42023,42043,42061,42071,42073,42083,42089,42101,42131,42139,42157,42169,42179,42181,42187,42193,42197,42209,42221,42223,42227,42239,42257,42281,42283,42293,42299,42307,42323,42331,42337,42349,42359,42373,42379,42391,42397,42403,42407,42409,42433,42437,42443,42451,42457,42461,42463,42467,42473,42487,42491,42499,42509,42533,42557,42569,42571,42577,42589,42611,42641,42643,42649,42667,42677,42683,42689,42697,42701,42703,42709,42719,42727,42737,42743,42751,42767,42773,42787,42793,42797,42821,42829,42839,42841,42853,42859,42863,42899,42901,42923,42929,42937,42943,42953,42961,42967,42979,42989,43003,43013,43019,43037,43049,43051,43063,43067,43093,43103,43117,43133,43151,43159,43177,43189,43201,43207,43223,43237,43261,43271,43283,43291,43313,43319,43321,43331,43391,43397,43399,43403,43411,43427,43441,43451,43457,43481,43487,43499,43517,43541,43543,43573,43577,43579,43591,43597,43607,43609,43613,43627,43633,43649,43651,43661,43669,43691,43711,43717,43721,43753,43759,43777,43781,43783,43787,43789,43793,43801,43853,43867,43889,43891,43913,43933,43943,43951,43961,43963,43969,43973,43987,43991,43997,44017,44021,44027,44029,44041,44053,44059,44071,44087,44089,44101,44111,44119,44123,44129,44131,44159,44171,44179,44189,44201,44203,44207,44221,44249,44257,44263,44267,44269,44273,44279,44281,44293,44351,44357,44371,44381,44383,44389,44417,44449,44453,44483,44491,44497,44501,44507,44519,44531,44533,44537,44543,44549,44563,44579,44587,44617,44621,44623,44633,44641,44647,44651,44657,44683,44687,44699,44701,44711,44729,44741,44753,44771,44773,44777,44789,44797,44809,44819,44839,44843,44851,44867,44879,44887,44893,44909,44917,44927,44939,44953,44959,44963,44971,44983,44987,45007,45013,45053,45061,45077,45083,45119,45121,45127,45131,45137,45139,45161,45179,45181,45191,45197,45233,45247,45259,45263,45281,45289,45293,45307,45317,45319,45329,45337,45341,45343,45361,45377,45389,45403,45413,45427,45433,45439,45481,45491,45497,45503,45523,45533,45541,45553,45557,45569,45587,45589,45599,45613,45631,45641,45659,45667,45673,45677,45691,45697,45707,45737,45751,45757,45763,45767,45779,45817,45821,45823,45827,45833,45841,45853,45863,45869,45887,45893,45943,45949,45953,45959,45971,45979,45989,46021,46027,46049,46051,46061,46073,46091,46093,46099,46103,46133,46141,46147,46153,46171,46181,46183,46187,46199,46219,46229,46237,46261,46271,46273,46279,46301,46307,46309,46327,46337,46349,46351,46381,46399,46411,46439,46441,46447,46451,46457,46471,46477,46489,46499,46507,46511,46523,46549,46559,46567,46573,46589,46591,46601,46619,46633,46639,46643,46649,46663,46679,46681,46687,46691,46703,46723,46727,46747,46751,46757,46769,46771,46807,46811,46817,46819,46829,46831,46853,46861,46867,46877,46889,46901,46919,46933,46957,46993,46997,47017,47041,47051,47057,47059,47087,47093,47111,47119,47123,47129,47137,47143,47147,47149,47161,47189,47207,47221,47237,47251,47269,47279,47287,47293,47297,47303,47309,47317,47339,47351,47353,47363,47381,47387,47389,47407,47417,47419,47431,47441,47459,47491,47497,47501,47507,47513,47521,47527,47533,47543,47563,47569,47581,47591,47599,47609,47623,47629,47639,47653,47657,47659,47681,47699,47701,47711,47713,47717,47737,47741,47743,47777,47779,47791,47797,47807,47809,47819,47837,47843,47857,47869,47881,47903,47911,47917,47933,47939,47947,47951,47963,47969,47977,47981,48017,48023,48029,48049,48073,48079,48091,48109,48119,48121,48131,48157,48163,48179,48187,48193,48197,48221,48239,48247,48259,48271,48281,48299,48311,48313,48337,48341,48353,48371,48383,48397,48407,48409,48413,48437,48449,48463,48473,48479,48481,48487,48491,48497,48523,48527,48533,48539,48541,48563,48571,48589,48593,48611,48619,48623,48647,48649,48661,48673,48677,48679,48731,48733,48751,48757,48761,48767,48779,48781,48787,48799,48809,48817,48821,48823,48847,48857,48859,48869,48871,48883,48889,48907,48947,48953,48973,48989,48991,49003,49009,49019,49031,49033,49037,49043,49057,49069,49081,49103,49109,49117,49121,49123,49139,49157,49169,49171,49177,49193,49199,49201,49207,49211,49223,49253,49261,49277,49279,49297,49307,49331,49333,49339,49363,49367,49369,49391,49393,49409,49411,49417,49429,49433,49451,49459,49463,49477,49481,49499,49523,49529,49531,49537,49547,49549,49559,49597,49603,49613,49627,49633,49639,49663,49667,49669,49681,49697,49711,49727,49739,49741,49747,49757,49783,49787,49789,49801,49807,49811,49823,49831,49843,49853,49871,49877,49891,49919,49921,49927,49937,49939,49943,49957,49991,49993,49999,50021,50023,50033,50047,50051,50053,50069,50077,50087,50093,50101,50111,50119,50123,50129,50131,50147,50153,50159,50177,50207,50221,50227,50231,50261,50263,50273,50287,50291,50311,50321,50329,50333,50341,50359,50363,50377,50383,50387,50411,50417,50423,50441,50459,50461,50497,50503,50513,50527,50539,50543,50549,50551,50581,50587,50591,50593,50599,50627,50647,50651,50671,50683,50707,50723,50741,50753,50767,50773,50777,50789,50821,50833,50839,50849,50857,50867,50873,50891,50893,50909,50923,50929,50951,50957,50969,50971,50989,50993,51001,51031,51043,51047,51059,51061,51071,51109,51131,51133,51137,51151,51157,51169,51193,51197,51199,51203,51217,51229,51239,51241,51257,51263,51283,51287,51307,51329,51341,51343,51347,51349,51361,51383,51407,51413,51419,51421,51427,51431,51437,51439,51449,51461,51473,51479,51481,51487,51503,51511,51517,51521,51539,51551,51563,51577,51581,51593,51599,51607,51613,51631,51637,51647,51659,51673,51679,51683,51691,51713,51719,51721,51749,51767,51769,51787,51797,51803,51817,51827,51829,51839,51853,51859,51869,51871,51893,51899,51907,51913,51929,51941,51949,51971,51973,51977,51991,52009,52021,52027,52051,52057,52067,52069,52081,52103,52121,52127,52147,52153,52163,52177,52181,52183,52189,52201,52223,52237,52249,52253,52259,52267,52289,52291,52301,52313,52321,52361,52363,52369,52379,52387,52391,52433,52453,52457,52489,52501,52511,52517,52529,52541,52543,52553,52561,52567,52571,52579,52583,52609,52627,52631,52639,52667,52673,52691,52697,52709,52711,52721,52727,52733,52747,52757,52769,52783,52807,52813,52817,52837,52859,52861,52879,52883,52889,52901,52903,52919,52937,52951,52957,52963,52967,52973,52981,52999,53003,53017,53047,53051,53069,53077,53087,53089,53093,53101,53113,53117,53129,53147,53149,53161,53171,53173,53189,53197,53201,53231,53233,53239,53267,53269,53279,53281,53299,53309,53323,53327,53353,53359,53377,53381,53401,53407,53411,53419,53437,53441,53453,53479,53503,53507,53527,53549,53551,53569,53591,53593,53597,53609,53611,53617,53623,53629,53633,53639,53653,53657,53681,53693,53699,53717,53719,53731,53759,53773,53777,53783,53791,53813,53819,53831,53849,53857,53861,53881,53887,53891,53897,53899,53917,53923,53927,53939,53951,53959,53987,53993,54001,54011,54013,54037,54049,54059,54083,54091,54101,54121,54133,54139,54151,54163,54167,54181,54193,54217,54251,54269,54277,54287,54293,54311,54319,54323,54331,54347,54361,54367,54371,54377,54401,54403,54409,54413,54419,54421,54437,54443,54449,54469,54493,54497,54499,54503,54517,54521,54539,54541,54547,54559,54563,54577,54581,54583,54601,54617,54623,54629,54631,54647,54667,54673,54679,54709,54713,54721,54727,54751,54767,54773,54779,54787,54799,54829,54833,54851,54869,54877,54881,54907,54917,54919,54941,54949,54959,54973,54979,54983,55001,55009,55021,55049,55051,55057,55061,55073,55079,55103,55109,55117,55127,55147,55163,55171,55201,55207,55213,55217,55219,55229,55243,55249,55259,55291,55313,55331,55333,55337,55339,55343,55351,55373,55381,55399,55411,55439,55441,55457,55469,55487,55501,55511,55529,55541,55547,55579,55589,55603,55609,55619,55621,55631,55633,55639,55661,55663,55667,55673,55681,55691,55697,55711,55717,55721,55733,55763,55787,55793,55799,55807,55813,55817,55819,55823,55829,55837,55843,55849,55871,55889,55897,55901,55903,55921,55927,55931,55933,55949,55967,55987,55997,56003,56009,56039,56041,56053,56081,56087,56093,56099,56101,56113,56123,56131,56149,56167,56171,56179,56197,56207,56209,56237,56239,56249,56263,56267,56269,56299,56311,56333,56359,56369,56377,56383,56393,56401,56417,56431,56437,56443,56453,56467,56473,56477,56479,56489,56501,56503,56509,56519,56527,56531,56533,56543,56569,56591,56597,56599,56611,56629,56633,56659,56663,56671,56681,56687,56701,56711,56713,56731,56737,56747,56767,56773,56779,56783,56807,56809,56813,56821,56827,56843,56857,56873,56891,56893,56897,56909,56911,56921,56923,56929,56941,56951,56957,56963,56983,56989,56993,56999,57037,57041,57047,57059,57073,57077,57089,57097,57107,57119,57131,57139,57143,57149,57163,57173,57179,57191,57193,57203,57221,57223,57241,57251,57259,57269,57271,57283,57287,57301,57329,57331,57347,57349,57367,57373,57383,57389,57397,57413,57427,57457,57467,57487,57493,57503,57527,57529,57557,57559,57571,57587,57593,57601,57637,57641,57649,57653,57667,57679,57689,57697,57709,57713,57719,57727,57731,57737,57751,57773,57781,57787,57791,57793,57803,57809,57829,57839,57847,57853,57859,57881,57899,57901,57917,57923,57943,57947,57973,57977,57991,58013,58027,58031,58043,58049,58057,58061,58067,58073,58099,58109,58111,58129,58147,58151,58153,58169,58171,58189,58193,58199,58207,58211,58217,58229,58231,58237,58243,58271,58309,58313,58321,58337,58363,58367,58369,58379,58391,58393,58403,58411,58417,58427,58439,58441,58451,58453,58477,58481,58511,58537,58543,58549,58567,58573,58579,58601,58603,58613,58631,58657,58661,58679,58687,58693,58699,58711,58727,58733,58741,58757,58763,58771,58787,58789,58831,58889,58897,58901,58907,58909,58913,58921,58937,58943,58963,58967,58979,58991,58997,59009,59011,59021,59023,59029,59051,59053,59063,59069,59077,59083,59093,59107,59113,59119,59123,59141,59149,59159,59167,59183,59197,59207,59209,59219,59221,59233,59239,59243,59263,59273,59281,59333,59341,59351,59357,59359,59369,59377,59387,59393,59399,59407,59417,59419,59441,59443,59447,59453,59467,59471,59473,59497,59509,59513,59539,59557,59561,59567,59581,59611,59617,59621,59627,59629,59651,59659,59663,59669,59671,59693,59699,59707,59723,59729,59743,59747,59753,59771,59779,59791,59797,59809,59833,59863,59879,59887,59921,59929,59951,59957,59971,59981,59999,60013,60017,60029,60037,60041,60077,60083,60089,60091,60101,60103,60107,60127,60133,60139,60149,60161,60167,60169,60209,60217,60223,60251,60257,60259,60271,60289,60293,60317,60331,60337,60343,60353,60373,60383,60397,60413,60427,60443,60449,60457,60493,60497,60509,60521,60527,60539,60589,60601,60607,60611,60617,60623,60631,60637,60647,60649,60659,60661,60679,60689,60703,60719,60727,60733,60737,60757,60761,60763,60773,60779,60793,60811,60821,60859,60869,60887,60889,60899,60901,60913,60917,60919,60923,60937,60943,60953,60961,61001,61007,61027,61031,61043,61051,61057,61091,61099,61121,61129,61141,61151,61153,61169,61211,61223,61231,61253,61261,61283,61291,61297,61331,61333,61339,61343,61357,61363,61379,61381,61403,61409,61417,61441,61463,61469,61471,61483,61487,61493,61507,61511,61519,61543,61547,61553,61559,61561,61583,61603,61609,61613,61627,61631,61637,61643,61651,61657,61667,61673,61681,61687,61703,61717,61723,61729,61751,61757,61781,61813,61819,61837,61843,61861,61871,61879,61909,61927,61933,61949,61961,61967,61979,61981,61987,61991,62003,62011,62017,62039,62047,62053,62057,62071,62081,62099,62119,62129,62131,62137,62141,62143,62171,62189,62191,62201,62207,62213,62219,62233,62273,62297,62299,62303,62311,62323,62327,62347,62351,62383,62401,62417,62423,62459,62467,62473,62477,62483,62497,62501,62507,62533,62539,62549,62563,62581,62591,62597,62603,62617,62627,62633,62639,62653,62659,62683,62687,62701,62723,62731,62743,62753,62761,62773,62791,62801,62819,62827,62851,62861,62869,62873,62897,62903,62921,62927,62929,62939,62969,62971,62981,62983,62987,62989,63029,63031,63059,63067,63073,63079,63097,63103,63113,63127,63131,63149,63179,63197,63199,63211,63241,63247,63277,63281,63299,63311,63313,63317,63331,63337,63347,63353,63361,63367,63377,63389,63391,63397,63409,63419,63421,63439,63443,63463,63467,63473,63487,63493,63499,63521,63527,63533,63541,63559,63577,63587,63589,63599,63601,63607,63611,63617,63629,63647,63649,63659,63667,63671,63689,63691,63697,63703,63709,63719,63727,63737,63743,63761,63773,63781,63793,63799,63803,63809,63823,63839,63841,63853,63857,63863,63901,63907,63913,63929,63949,63977,63997,64007,64013,64019,64033,64037,64063,64067,64081,64091,64109,64123,64151,64153,64157,64171,64187,64189,64217,64223,64231,64237,64271,64279,64283,64301,64303,64319,64327,64333,64373,64381,64399,64403,64433,64439,64451,64453,64483,64489,64499,64513,64553,64567,64577,64579,64591,64601,64609,64613,64621,64627,64633,64661,64663,64667,64679,64693,64709,64717,64747,64763,64781,64783,64793,64811,64817,64849,64853,64871,64877,64879,64891,64901,64919,64921,64927,64937,64951,64969,64997,65003,65011,65027,65029,65033,65053,65063,65071,65089,65099,65101,65111,65119,65123,65129,65141,65147,65167,65171,65173,65179,65183,65203,65213,65239,65257,65267,65269,65287,65293,65309,65323,65327,65353,65357,65371,65381,65393,65407,65413,65419,65423,65437,65447,65449,65479,65497,65519,65521,65537,65539,65543,65551,65557,65563,65579,65581,65587,65599,65609,65617,65629,65633,65647,65651,65657,65677,65687,65699,65701,65707,65713,65717,65719,65729,65731,65761,65777,65789,65809,65827,65831,65837,65839,65843,65851,65867,65881,65899,65921,65927,65929,65951,65957,65963,65981,65983,65993,66029,66037,66041,66047,66067,66071,66083,66089,66103,66107,66109,66137,66161,66169,66173,66179,66191,66221,66239,66271,66293,66301,66337,66343,66347,66359,66361,66373,66377,66383,66403,66413,66431,66449,66457,66463,66467,66491,66499,66509,66523,66529,66533,66541,66553,66569,66571,66587,66593,66601,66617,66629,66643,66653,66683,66697,66701,66713,66721,66733,66739,66749,66751,66763,66791,66797,66809,66821,66841,66851,66853,66863,66877,66883,66889,66919,66923,66931,66943,66947,66949,66959,66973,66977,67003,67021,67033,67043,67049,67057,67061,67073,67079,67103,67121,67129,67139,67141,67153,67157,67169,67181,67187,67189,67211,67213,67217,67219,67231,67247,67261,67271,67273,67289,67307,67339,67343,67349,67369,67391,67399,67409,67411,67421,67427,67429,67433,67447,67453,67477,67481,67489,67493,67499,67511,67523,67531,67537,67547,67559,67567,67577,67579,67589,67601,67607,67619,67631,67651,67679,67699,67709,67723,67733,67741,67751,67757,67759,67763,67777,67783,67789,67801,67807,67819,67829,67843,67853,67867,67883,67891,67901,67927,67931,67933,67939,67943,67957,67961,67967,67979,67987,67993,68023,68041,68053,68059,68071,68087,68099,68111,68113,68141,68147,68161,68171,68207,68209,68213,68219,68227,68239,68261,68279,68281,68311,68329,68351,68371,68389,68399,68437,68443,68447,68449,68473,68477,68483,68489,68491,68501,68507,68521,68531,68539,68543,68567,68581,68597,68611,68633,68639,68659,68669,68683,68687,68699,68711,68713,68729,68737,68743,68749,68767,68771,68777,68791,68813,68819,68821,68863,68879,68881,68891,68897,68899,68903,68909,68917,68927,68947,68963,68993,69001,69011,69019,69029,69031,69061,69067,69073,69109,69119,69127,69143,69149,69151,69163,69191,69193,69197,69203,69221,69233,69239,69247,69257,69259,69263,69313,69317,69337,69341,69371,69379,69383,69389,69401,69403,69427,69431,69439,69457,69463,69467,69473,69481,69491,69493,69497,69499,69539,69557,69593,69623,69653,69661,69677,69691,69697,69709,69737,69739,69761,69763,69767,69779,69809,69821,69827,69829,69833,69847,69857,69859,69877,69899,69911,69929,69931,69941,69959,69991,69997,70001,70003,70009,70019,70039,70051,70061,70067,70079,70099,70111,70117,70121,70123,70139,70141,70157,70163,70177,70181,70183,70199,70201,70207,70223,70229,70237,70241,70249,70271,70289,70297,70309,70313,70321,70327,70351,70373,70379,70381,70393,70423,70429,70439,70451,70457,70459,70481,70487,70489,70501,70507,70529,70537,70549,70571,70573,70583,70589,70607,70619,70621,70627,70639,70657,70663,70667,70687,70709,70717,70729,70753,70769,70783,70793,70823,70841,70843,70849,70853,70867,70877,70879,70891,70901,70913,70919,70921,70937,70949,70951,70957,70969,70979,70981,70991,70997,70999,71011,71023,71039,71059,71069,71081,71089,71119,71129,71143,71147,71153,71161,71167,71171,71191,71209,71233,71237,71249,71257,71261,71263,71287,71293,71317,71327,71329,71333,71339,71341,71347,71353,71359,71363,71387,71389,71399,71411,71413,71419,71429,71437,71443,71453,71471,71473,71479,71483,71503,71527,71537,71549,71551,71563,71569,71593,71597,71633,71647,71663,71671,71693,71699,71707,71711,71713,71719,71741,71761,71777,71789,71807,71809,71821,71837,71843,71849,71861,71867,71879,71881,71887,71899,71909,71917,71933,71941,71947,71963,71971,71983,71987,71993,71999,72019,72031,72043,72047,72053,72073,72077,72089,72091,72101,72103,72109,72139,72161,72167,72169,72173,72211,72221,72223,72227,72229,72251,72253,72269,72271,72277,72287,72307,72313,72337,72341,72353,72367,72379,72383,72421,72431,72461,72467,72469,72481,72493,72497,72503,72533,72547,72551,72559,72577,72613,72617,72623,72643,72647,72649,72661,72671,72673,72679,72689,72701,72707,72719,72727,72733,72739,72763,72767,72797,72817,72823,72859,72869,72871,72883,72889,72893,72901,72907,72911,72923,72931,72937,72949,72953,72959,72973,72977,72997,73009,73013,73019,73037,73039,73043,73061,73063,73079,73091,73121,73127,73133,73141,73181,73189,73237,73243,73259,73277,73291,73303,73309,73327,73331,73351,73361,73363,73369,73379,73387,73417,73421,73433,73453,73459,73471,73477,73483,73517,73523,73529,73547,73553,73561,73571,73583,73589,73597,73607,73609,73613,73637,73643,73651,73673,73679,73681,73693,73699,73709,73721,73727,73751,73757,73771,73783,73819,73823,73847,73849,73859,73867,73877,73883,73897,73907,73939,73943,73951,73961,73973,73999,74017,74021,74027,74047,74051,74071,74077,74093,74099,74101,74131,74143,74149,74159,74161,74167,74177,74189,74197,74201,74203,74209,74219,74231,74257,74279,74287,74293,74297,74311,74317,74323,74353,74357,74363,74377,74381,74383,74411,74413,74419,74441,74449,74453,74471,74489,74507,74509,74521,74527,74531,74551,74561,74567,74573,74587,74597,74609,74611,74623,74653,74687,74699,74707,74713,74717,74719,74729,74731,74747,74759,74761,74771,74779,74797,74821,74827,74831,74843,74857,74861,74869,74873,74887,74891,74897,74903,74923,74929,74933,74941,74959,75011,75013,75017,75029,75037,75041,75079,75083,75109,75133,75149,75161,75167,75169,75181,75193,75209,75211,75217,75223,75227,75239,75253,75269,75277,75289,75307,75323,75329,75337,75347,75353,75367,75377,75389,75391,75401,75403,75407,75431,75437,75479,75503,75511,75521,75527,75533,75539,75541,75553,75557,75571,75577,75583,75611,75617,75619,75629,75641,75653,75659,75679,75683,75689,75703,75707,75709,75721,75731,75743,75767,75773,75781,75787,75793,75797,75821,75833,75853,75869,75883,75913,75931,75937,75941,75967,75979,75983,75989,75991,75997,76001,76003,76031,76039,76079,76081,76091,76099,76103,76123,76129,76147,76157,76159,76163,76207,76213,76231,76243,76249,76253,76259,76261,76283,76289,76303,76333,76343,76367,76369,76379,76387,76403,76421,76423,76441,76463,76471,76481,76487,76493,76507,76511,76519,76537,76541,76543,76561,76579,76597,76603,76607,76631,76649,76651,76667,76673,76679,76697,76717,76733,76753,76757,76771,76777,76781,76801,76819,76829,76831,76837,76847,76871,76873,76883,76907,76913,76919,76943,76949,76961,76963,76991,77003,77017,77023,77029,77041,77047,77069,77081,77093,77101,77137,77141,77153,77167,77171,77191,77201,77213,77237,77239,77243,77249,77261,77263,77267,77269,77279,77291,77317,77323,77339,77347,77351,77359,77369,77377,77383,77417,77419,77431,77447,77471,77477,77479,77489,77491,77509,77513,77521,77527,77543,77549,77551,77557,77563,77569,77573,77587,77591,77611,77617,77621,77641,77647,77659,77681,77687,77689,77699,77711,77713,77719,77723,77731,77743,77747,77761,77773,77783,77797,77801,77813,77839,77849,77863,77867,77893,77899,77929,77933,77951,77969,77977,77983,77999,78007,78017,78031,78041,78049,78059,78079,78101,78121,78137,78139,78157,78163,78167,78173,78179,78191,78193,78203,78229,78233,78241,78259,78277,78283,78301,78307,78311,78317,78341,78347,78367,78401,78427,78437,78439,78467,78479,78487,78497,78509,78511,78517,78539,78541,78553,78569,78571,78577,78583,78593,78607,78623,78643,78649,78653,78691,78697,78707,78713,78721,78737,78779,78781,78787,78791,78797,78803,78809,78823,78839,78853,78857,78877,78887,78889,78893,78901,78919,78929,78941,78977,78979,78989,79031,79039,79043,79063,79087,79103,79111,79133,79139,79147,79151,79153,79159,79181,79187,79193,79201,79229,79231,79241,79259,79273,79279,79283,79301,79309,79319,79333,79337,79349,79357,79367,79379,79393,79397,79399,79411,79423,79427,79433,79451,79481,79493,79531,79537,79549,79559,79561,79579,79589,79601,79609,79613,79621,79627,79631,79633,79657,79669,79687,79691,79693,79697,79699,79757,79769,79777,79801,79811,79813,79817,79823,79829,79841,79843,79847,79861,79867,79873,79889,79901,79903,79907,79939,79943,79967,79973,79979,79987,79997,79999,80021,80039,80051,80071,80077,80107,80111,80141,80147,80149,80153,80167,80173,80177,80191,80207,80209,80221,80231,80233,80239,80251,80263,80273,80279,80287,80309,80317,80329,80341,80347,80363,80369,80387,80407,80429,80447,80449,80471,80473,80489,80491,80513,80527,80537,80557,80567,80599,80603,80611,80621,80627,80629,80651,80657,80669,80671,80677,80681,80683,80687,80701,80713,80737,80747,80749,80761,80777,80779,80783,80789,80803,80809,80819,80831,80833,80849,80863,80897,80909,80911,80917,80923,80929,80933,80953,80963,80989,81001,81013,81017,81019,81023,81031,81041,81043,81047,81049,81071,81077,81083,81097,81101,81119,81131,81157,81163,81173,81181,81197,81199,81203,81223,81233,81239,81281,81283,81293,81299,81307,81331,81343,81349,81353,81359,81371,81373,81401,81409,81421,81439,81457,81463,81509,81517,81527,81533,81547,81551,81553,81559,81563,81569,81611,81619,81629,81637,81647,81649,81667,81671,81677,81689,81701,81703,81707,81727,81737,81749,81761,81769,81773,81799,81817,81839,81847,81853,81869,81883,81899,81901,81919,81929,81931,81937,81943,81953,81967,81971,81973,82003,82007,82009,82013,82021,82031,82037,82039,82051,82067,82073,82129,82139,82141,82153,82163,82171,82183,82189,82193,82207,82217,82219,82223,82231,82237,82241,82261,82267,82279,82301,82307,82339,82349,82351,82361,82373,82387,82393,82421,82457,82463,82469,82471,82483,82487,82493,82499,82507,82529,82531,82549,82559,82561,82567,82571,82591,82601,82609,82613,82619,82633,82651,82657,82699,82721,82723,82727,82729,82757,82759,82763,82781,82787,82793,82799,82811,82813,82837,82847,82883,82889,82891,82903,82913,82939,82963,82981,82997,83003,83009,83023,83047,83059,83063,83071,83077,83089,83093,83101,83117,83137,83177,83203,83207,83219,83221,83227,83231,83233,83243,83257,83267,83269,83273,83299,83311,83339,83341,83357,83383,83389,83399,83401,83407,83417,83423,83431,83437,83443,83449,83459,83471,83477,83497,83537,83557,83561,83563,83579,83591,83597,83609,83617,83621,83639,83641,83653,83663,83689,83701,83717,83719,83737,83761,83773,83777,83791,83813,83833,83843,83857,83869,83873,83891,83903,83911,83921,83933,83939,83969,83983,83987,84011,84017,84047,84053,84059,84061,84067,84089,84121,84127,84131,84137,84143,84163,84179,84181,84191,84199,84211,84221,84223,84229,84239,84247,84263,84299,84307,84313,84317,84319,84347,84349,84377,84389,84391,84401,84407,84421,84431,84437,84443,84449,84457,84463,84467,84481,84499,84503,84509,84521,84523,84533,84551,84559,84589,84629,84631,84649,84653,84659,84673,84691,84697,84701,84713,84719,84731,84737,84751,84761,84787,84793,84809,84811,84827,84857,84859,84869,84871,84913,84919,84947,84961,84967,84977,84979,84991,85009,85021,85027,85037,85049,85061,85081,85087,85091,85093,85103,85109,85121,85133,85147,85159,85193,85199,85201,85213,85223,85229,85237,85243,85247,85259,85297,85303,85313,85331,85333,85361,85363,85369,85381,85411,85427,85429,85439,85447,85451,85453,85469,85487,85513,85517,85523,85531,85549,85571,85577,85597,85601,85607,85619,85621,85627,85639,85643,85661,85667,85669,85691,85703,85711,85717,85733,85751,85781,85793,85817,85819,85829,85831,85837,85843,85847,85853,85889,85903,85909,85931,85933,85991,85999,86011,86017,86027,86029,86069,86077,86083,86111,86113,86117,86131,86137,86143,86161,86171,86179,86183,86197,86201,86209,86239,86243,86249,86257,86263,86269,86287,86291,86293,86297,86311,86323,86341,86351,86353,86357,86369,86371,86381,86389,86399,86413,86423,86441,86453,86461,86467,86477,86491,86501,86509,86531,86533,86539,86561,86573,86579,86587,86599,86627,86629,86677,86689,86693,86711,86719,86729,86743,86753,86767,86771,86783,86813,86837,86843,86851,86857,86861,86869,86923,86927,86929,86939,86951,86959,86969,86981,86993,87011,87013,87037,87041,87049,87071,87083,87103,87107,87119,87121,87133,87149,87151,87179,87181,87187,87211,87221,87223,87251,87253,87257,87277,87281,87293,87299,87313,87317,87323,87337,87359,87383,87403,87407,87421,87427,87433,87443,87473,87481,87491,87509,87511,87517,87523,87539,87541,87547,87553,87557,87559,87583,87587,87589,87613,87623,87629,87631,87641,87643,87649,87671,87679,87683,87691,87697,87701,87719,87721,87739,87743,87751,87767,87793,87797,87803,87811,87833,87853,87869,87877,87881,87887,87911,87917,87931,87943,87959,87961,87973,87977,87991,88001,88003,88007,88019,88037,88069,88079,88093,88117,88129,88169,88177,88211,88223,88237,88241,88259,88261,88289,88301,88321,88327,88337,88339,88379,88397,88411,88423,88427,88463,88469,88471,88493,88499,88513,88523,88547,88589,88591,88607,88609,88643,88651,88657,88661,88663,88667,88681,88721,88729,88741,88747,88771,88789,88793,88799,88801,88807,88811,88813,88817,88819,88843,88853,88861,88867,88873,88883,88897,88903,88919,88937,88951,88969,88993,88997,89003,89009,89017,89021,89041,89051,89057,89069,89071,89083,89087,89101,89107,89113,89119,89123,89137,89153,89189,89203,89209,89213,89227,89231,89237,89261,89269,89273,89293,89303,89317,89329,89363,89371,89381,89387,89393,89399,89413,89417,89431,89443,89449,89459,89477,89491,89501,89513,89519,89521,89527,89533,89561,89563,89567,89591,89597,89599,89603,89611,89627,89633,89653,89657,89659,89669,89671,89681,89689,89753,89759,89767,89779,89783,89797,89809,89819,89821,89833,89839,89849,89867,89891,89897,89899,89909,89917,89923,89939,89959,89963,89977,89983,89989,90001,90007,90011,90017,90019,90023,90031,90053,90059,90067,90071,90073,90089,90107,90121,90127,90149,90163,90173,90187,90191,90197,90199,90203,90217,90227,90239,90247,90263,90271,90281,90289,90313,90353,90359,90371,90373,90379,90397,90401,90403,90407,90437,90439,90469,90473,90481,90499,90511,90523,90527,90529,90533,90547,90583,90599,90617,90619,90631,90641,90647,90659,90677,90679,90697,90703,90709,90731,90749,90787,90793,90803,90821,90823,90833,90841,90847,90863,90887,90901,90907,90911,90917,90931,90947,90971,90977,90989,90997,91009,91019,91033,91079,91081,91097,91099,91121,91127,91129,91139,91141,91151,91153,91159,91163,91183,91193,91199,91229,91237,91243,91249,91253,91283,91291,91297,91303,91309,91331,91367,91369,91373,91381,91387,91393,91397,91411,91423,91433,91453,91457,91459,91463,91493,91499,91513,91529,91541,91571,91573,91577,91583,91591,91621,91631,91639,91673,91691,91703,91711,91733,91753,91757,91771,91781,91801,91807,91811,91813,91823,91837,91841,91867,91873,91909,91921,91939,91943,91951,91957,91961,91967,91969,91997,92003,92009,92033,92041,92051,92077,92083,92107,92111,92119,92143,92153,92173,92177,92179,92189,92203,92219,92221,92227,92233,92237,92243,92251,92269,92297,92311,92317,92333,92347,92353,92357,92363,92369,92377,92381,92383,92387,92399,92401,92413,92419,92431,92459,92461,92467,92479,92489,92503,92507,92551,92557,92567,92569,92581,92593,92623,92627,92639,92641,92647,92657,92669,92671,92681,92683,92693,92699,92707,92717,92723,92737,92753,92761,92767,92779,92789,92791,92801,92809,92821,92831,92849,92857,92861,92863,92867,92893,92899,92921,92927,92941,92951,92957,92959,92987,92993,93001,93047,93053,93059,93077,93083,93089,93097,93103,93113,93131,93133,93139,93151,93169,93179,93187,93199,93229,93239,93241,93251,93253,93257,93263,93281,93283,93287,93307,93319,93323,93329,93337,93371,93377,93383,93407,93419,93427,93463,93479,93481,93487,93491,93493,93497,93503,93523,93529,93553,93557,93559,93563,93581,93601,93607,93629,93637,93683,93701,93703,93719,93739,93761,93763,93787,93809,93811,93827,93851,93871,93887,93889,93893,93901,93911,93913,93923,93937,93941,93949,93967,93971,93979,93983,93997,94007,94009,94033,94049,94057,94063,94079,94099,94109,94111,94117,94121,94151,94153,94169,94201,94207,94219,94229,94253,94261,94273,94291,94307,94309,94321,94327,94331,94343,94349,94351,94379,94397,94399,94421,94427,94433,94439,94441,94447,94463,94477,94483,94513,94529,94531,94541,94543,94547,94559,94561,94573,94583,94597,94603,94613,94621,94649,94651,94687,94693,94709,94723,94727,94747,94771,94777,94781,94789,94793,94811,94819,94823,94837,94841,94847,94849,94873,94889,94903,94907,94933,94949,94951,94961,94993,94999,95003,95009,95021,95027,95063,95071,95083,95087,95089,95093,95101,95107,95111,95131,95143,95153,95177,95189,95191,95203,95213,95219,95231,95233,95239,95257,95261,95267,95273,95279,95287,95311,95317,95327,95339,95369,95383,95393,95401,95413,95419,95429,95441,95443,95461,95467,95471,95479,95483,95507,95527,95531,95539,95549,95561,95569,95581,95597,95603,95617,95621,95629,95633,95651,95701,95707,95713,95717,95723,95731,95737,95747,95773,95783,95789,95791,95801,95803,95813,95819,95857,95869,95873,95881,95891,95911,95917,95923,95929,95947,95957,95959,95971,95987,95989,96001,96013,96017,96043,96053,96059,96079,96097,96137,96149,96157,96167,96179,96181,96199,96211,96221,96223,96233,96259,96263,96269,96281,96289,96293,96323,96329,96331,96337,96353,96377,96401,96419,96431,96443,96451,96457,96461,96469,96479,96487,96493,96497,96517,96527,96553,96557,96581,96587,96589,96601,96643,96661,96667,96671,96697,96703,96731,96737,96739,96749,96757,96763,96769,96779,96787,96797,96799,96821,96823,96827,96847,96851,96857,96893,96907,96911,96931,96953,96959,96973,96979,96989,96997,97001,97003,97007,97021,97039,97073,97081,97103,97117,97127,97151,97157,97159,97169,97171,97177,97187,97213,97231,97241,97259,97283,97301,97303,97327,97367,97369,97373,97379,97381,97387,97397,97423,97429,97441,97453,97459,97463,97499,97501,97511,97523,97547,97549,97553,97561,97571,97577,97579,97583,97607,97609,97613,97649,97651,97673,97687,97711,97729,97771,97777,97787,97789,97813,97829,97841,97843,97847,97849,97859,97861,97871,97879,97883,97919,97927,97931,97943,97961,97967,97973,97987,98009,98011,98017,98041,98047,98057,98081,98101,98123,98129,98143,98179,98207,98213,98221,98227,98251,98257,98269,98297,98299,98317,98321,98323,98327,98347,98369,98377,98387,98389,98407,98411,98419,98429,98443,98453,98459,98467,98473,98479,98491,98507,98519,98533,98543,98561,98563,98573,98597,98621,98627,98639,98641,98663,98669,98689,98711,98713,98717,98729,98731,98737,98773,98779,98801,98807,98809,98837,98849,98867,98869,98873,98887,98893,98897,98899,98909,98911,98927,98929,98939,98947,98953,98963,98981,98993,98999,99013,99017,99023,99041,99053,99079,99083,99089,99103,99109,99119,99131,99133,99137,99139,99149,99173,99181,99191,99223,99233,99241,99251,99257,99259,99277,99289,99317,99347,99349,99367,99371,99377,99391,99397,99401,99409,99431,99439,99469,99487,99497,99523,99527,99529,99551,99559,99563,99571,99577,99581,99607,99611,99623,99643,99661,99667,99679,99689,99707,99709,99713,99719,99721,99733,99761,99767,99787,99793,99809,99817,99823,99829,99833,99839,99859,99871,99877,99881,99901,99907,99923,99929,99961,99971,99989,99991&#125;; ${To\;Be\;Continued…}$]]></content>
      <tags>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P3406 海底高铁 解题报告]]></title>
    <url>%2F2019%2F01%2F24%2F%E6%B5%B7%E5%BA%95%E9%AB%98%E9%93%81%2F</url>
    <content type="text"><![CDATA[题目链接:P3406 海底高铁题目分析:​ （第一眼以为是最短路） 这道题作为前缀和的练习挺不错的，因为它几乎不涉及其他算法。 ​ 首先根据题目中的信息进行数据读入：不开long long见祖宗（这题貌似不会） 123456789ll n,m,ans=0;//共N个城市,途经M个城市scanf("%lld%lld",&amp;n,&amp;m);ll p[m+1];//访问顺序ll t[n+1]=&#123;&#125;;//经过次数,一定要初始化！ll a[n+1],b[n+1],c[n+1],x,y;//a[i]纸质单程票,b[i]办卡后的优惠价,c[i]办卡工本费for(ll i=1;i&lt;=m;i++) scanf("%lld",&amp;p[i]);for(ll i=1;i&lt;=n-1;i++) scanf("%lld%lld%lld",&amp;a[i],&amp;b[i],&amp;c[i]); ​ 由于第i段铁路连接了城市i和城市i+1，所以任意两个相邻的站点购买同种车票有且仅有一种费用，也就是说，价格仅与在某相邻两站之间的通过次数有关。此时，我们就将问题转化为求在给定路线下，每相邻两个站点路段的经过次数. ​ 那么，在出发之前，我们可以将每两站之间路段的经过次数全部初始化为0，然后，对每次给定的始发站和终到站，将其视作给定区间的两个端点，对此区间进行区间增操作。 如何进行区间增呢？？？首先这是给定的四个站点 ​ 如果我们按照1-3,3-2,2-4,4-3的顺序访问，可以发现四个站点间的路径经过次数是这样的： 路径 1-2 2-3 3-4 次数 1 3 2 ​ 一般的思路是，对于每个区间，用一个for对其所经次数++，然而我们发现，太慢了。 ​ 于是我们想到了前缀和： 对于每一个区间，我们可以在其左端点加上区间增的权值，再在右端点+1的位置减去区间增的权值，最后对该区间进行求前缀和操作。这样，我们可以得到一样的结果。 回到题目中​ 恍然大悟，对于每组给定的区间端点，也可以使用同样的方法。更方便地，我们可以在对所有区间端点处理完毕后，在进行求前缀和操作： 12345678910111213141516171819202122 //由于给定的信息是端点（城市），但是要求的是区间（路段），所以循环次数应为城市数-1 for(ll i=1;i&lt;=m-1;i++)&#123; //对于端点的处理，要严格满足数学上的定义，小的在左端点，大的在右端点 //否则对于逆序信息，就相当于进行了区间减操作 if(p[i]&gt;p[i+1])&#123; x=p[i+1]; y=p[i]; &#125; else&#123; x=p[i]; y=p[i+1]; &#125; //上面的代码可以简写为: //x=min(p[i],p[i+1]); //y=max(p[i],p[i+1]); t[x]++;//左端点增 t[y]--;//右端点减 &#125;//求前缀和 for(ll i=1;i&lt;=n;i++)&#123; t[i]+=t[i-1]; &#125; ​ 最后，对于每一段路径，总价值加上该段路径费用的较小值。 12for(ll i=1;i&lt;=n-1;i++) ans+=min(a[i]*t[i],(b[i]*t[i]+c[i])); ​ 本题就解决啦！ 代码12345678910111213141516171819202122232425262728293031323334353637#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;iostream&gt;#define ll long long#define max(a,b) a&gt;b?a:b#define min(a,b) a&lt;b?a:busing namespace std;int main()&#123; ll n,m,ans=0; scanf("%lld%lld",&amp;n,&amp;m); ll p[m+1]; ll t[n+1]=&#123;&#125;; ll a[n+1],b[n+1],c[n+1],x,y; for(ll i=1;i&lt;=m;i++) scanf("%lld",&amp;p[i]); for(ll i=1;i&lt;=n-1;i++) scanf("%lld%lld%lld",&amp;a[i],&amp;b[i],&amp;c[i]); for(ll i=1;i&lt;=m-1;i++)&#123; if(p[i]&gt;p[i+1])&#123; x=p[i+1]; y=p[i]; &#125; else&#123; x=p[i]; y=p[i+1]; &#125; t[x]++; t[y]--; &#125; for(ll i=1;i&lt;=n;i++)&#123; t[i]+=t[i-1]; &#125; for(ll i=1;i&lt;=n-1;i++) ans+=min(a[i]*t[i],(b[i]*t[i]+c[i])); printf("%lld",ans); return 0;&#125;]]></content>
      <tags>
        <tag>解题报告</tag>
        <tag>前缀和</tag>
        <tag>差分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[贪心策略 学习报告]]></title>
    <url>%2F2019%2F01%2F24%2F%E8%B4%AA%E5%BF%83%E7%AD%96%E7%95%A5-%E5%AD%A6%E4%B9%A0%E6%8A%A5%E5%91%8A%2F</url>
    <content type="text"><![CDATA[大胆贪心，（不用）小心证明。——阮行止 简介定义贪心算法，本质上来讲不是一种算法，而是一种策略。其基本思路是在题解满足局部最优解将导致全局最优解时，每一次决策考虑且仅考虑当前最优解。 举个例子就拿天朝RMB面额的设计来讲，仅举元这一单位，分别有1元，5元，10元，50元，100元五种面额。为什么要这样设计呢？在日常的生活中，我们买东西时就会发现，对于任意一个价格的商品，我们在购买时，要想花费最少张数的RMB，只需永远花费当前小于等于商品面额的货币。这就是一种贪心策略。 例子的证明我太菜了不会证。 使用条件题意方面在定义中就提到过，要想使用贪心策略，一定要在题解满足局部最优解导致全局最优解。对于简单的贪心，你看题面就知道这是个贪心，而有技巧的贪心则需要自己的猜测与证明。 关于局部最优解局部最优解，即在当前局面看来，不考虑后续状态的情况下，结果最优的解。即是当前问题的一个子问题的最优解。 贪心的证明贪心策略是需要证明的，至于严谨性就看个人对于答案的确信程度和rp。 常用的方法微扰法个人至今都不是很会的一种方法。就是先假设一种贪心策略，再对该策略的局面做出所有可能的扰动（如交换相邻的两个元素），然后讨论扰动后的局面是否会造成更优的局面，若是，则原贪心策略被推翻；若对于所有的扰动局面，都有原贪心策略优于微扰后的策略，那么贪心成立。 解集分析法先枚举出小规模内的局面，若对于该规模问题，所有的解均能由同一种贪心策略取得，那么考虑该策略，扩大问题规模（有点像迭代加深搜索），将该策略取得的解与枚举的解对比，若成立，则策略极有可能成立。注意这里的极有可能，有些毒瘤数据可能刚好违背该策略，所以这是一种不严谨的方法。 数学方法我们先看个典例： 排队打水问题有n个人排队到r个水龙头去打水，他们装满水桶的时间t1、t2………..tn为整数且各不相等，应如何安排他们的打水顺序才能使他们总共花费的时间最少？ 好像前面两种方法都行不通了？其实我没试过我没来看一个黑科技： 排序不等式不等式的证明百科上讲的很清楚了，我就把结论挂在这吧：$$\text{对于两个有序数组:$a_1\le a_2\le a_3\le …\le a_n$及$b_1\le b_2\le b_3\le …\le b_n$:}​$$ $$\sum\limits_{i=1}^na_ib_i\ge \sum\limits_{i=1}^na_ib_{j_i}\ge\sum\limits_{i=1}^na_ib_{n+1-i} $$ $${通俗来讲，就是顺序和\ge 乱序和\ge 逆序和}$$ 那么，上面的例子就很好解决了吧？ 总是规划打水时间最短者先打，再计算总打水时间，就可以得到最优的打水时间。 总结正如阮行止所说,“太贪心了是要栽跟头的。”，贪心策略固可解决一部分题，但是，如果时时刻刻想着贪心，DP也写贪心，终究是得不到高分的。做人也正是如此吧。]]></content>
      <tags>
        <tag>学习报告</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1616 疯狂的采药 解题报告]]></title>
    <url>%2F2019%2F01%2F19%2F%E7%96%AF%E7%8B%82%E7%9A%84%E9%87%87%E8%8D%AF%2F</url>
    <content type="text"><![CDATA[题目链接:P1616 疯狂的采药题目分析：很明显的完全背包。首先，我们先把这道题转化为标准完全背包： 各种草药 物品 草药的价值 物品的价值 草药的采摘时间 物品的质量 总采摘时间 背包容量 ok,那么这道题就变成了板子题。 我们先来设计状态： 设$$\text{dp[i]为背包容量为i时，能放下的物品的最大价值}$$ $$\text{t[j]与p[j]分别存储第j个物品的质量和价值}$$ 然后进行状态转移： 对于容量为k的背包，第m个物品，我们考虑： 如果放这件物品，那么k容量背包的价值为dp[k-t[m]]+p[m] 如果不放，那么k容量背包的价值仍为原始的dp[k] 根据数组dp的定义，我们可以得到状态转移方程: $$\text{dp[k]=max(dp[k-t[m]]+p[m],dp[k])}$$ 同时，我们需要考虑该物品放入背包的先决条件： $$\text{k-t[m]}\ge\text{0}$$ 考虑每一件物品，并且综合上面的条件,我们得到了代码：1234567for(int i=1;i&lt;=T;i++)&#123; dp[i]=0; //初始化，可通过将数组开在主函数外面省略这一步 for(int j=1;j&lt;=n;j++)&#123; if(i-t[j]&gt;=0) dp[i]=max(dp[i],dp[i-t[j]]+p[j]) &#125; &#125; 问题所求的便是dp[T]。 Source Code1234567891011121314151617181920#include&lt;cstdio&gt;#include&lt;algorithm&gt;using std::max;int main()&#123; int n,T; scanf("%d%d",&amp;T,&amp;n); int t[n+1],p[n+1],dp[T+1]; for(int i=1;i&lt;=n;i++)&#123; scanf("%d%d",&amp;t[i],&amp;p[i]); &#125; dp[0]=0; for(int i=1;i&lt;=T;i++)&#123; dp[i]=0; for(int j=1;j&lt;=n;j++)&#123; if(i-t[j]&gt;=0) dp[i]=max(dp[i],dp[i-t[j]]+p[j]) &#125; &#125; printf("%d",dp[T]); return 0;&#125;]]></content>
      <tags>
        <tag>解题报告</tag>
        <tag>线性DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小闹钟]]></title>
    <url>%2F2019%2F01%2F19%2F%E5%B0%8F%E9%97%B9%E9%92%9F%2F</url>
    <content type="text"><![CDATA[简介你从来没有玩过的船新版本当前版本只支持倒计时(巨水 Source Code1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include&lt;cstdlib&gt;#include&lt;windows.h&gt;#include&lt;iostream&gt;using namespace std;int main()&#123; int hour,second,minute; cout&lt;&lt;"输入格式\"时 分 秒\""&lt;&lt;endl; cin&gt;&gt;hour&gt;&gt;minute&gt;&gt;second; if(minute==60&amp;&amp;second&gt;0) &#123; cout&lt;&lt;"Input error!"&lt;&lt;endl; &#125; else &#123; if(minute&gt;60||second&gt;60) cout&lt;&lt;"Input error!"&lt;&lt;endl; else &#123; for(int i=3600*hour+60*minute+second;i&gt;0;Sleep(1000),i--) &#123; system("cls"); if((minute)&lt;0) &#123; hour-=1; minute=60; &#125; if((second-1)&lt;0) &#123; minute-=1; second=60; &#125; if(second&lt;10&amp;&amp;minute&lt;10) &#123; second--; cout&lt;&lt;hour&lt;&lt;":0"&lt;&lt;minute&lt;&lt;":0"&lt;&lt;second&lt;&lt;endl; &#125; if(second&lt;10&amp;&amp;minute&gt;=10) &#123; second--; cout&lt;&lt;hour&lt;&lt;":"&lt;&lt;minute&lt;&lt;":0"&lt;&lt;second&lt;&lt;endl; &#125; if(second&gt;=10&amp;&amp;minute&lt;10) &#123; second--; cout&lt;&lt;hour&lt;&lt;":0"&lt;&lt;minute&lt;&lt;":"&lt;&lt;second&lt;&lt;endl; &#125; if(second&gt;=10&amp;&amp;minute&gt;=10) &#123; second--; cout&lt;&lt;hour&lt;&lt;":"&lt;&lt;minute&lt;&lt;":"&lt;&lt;second&lt;&lt;endl; &#125; &#125; for(int i=10;i&gt;0;i--) &#123; cout&lt;&lt;"\a"&lt;&lt;endl; Sleep(1000); &#125; &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
</search>
