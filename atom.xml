<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zgjjj的博客</title>
  
  <subtitle>你仍然是我的光芒</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zgjjj.github.io/"/>
  <updated>2019-01-24T05:18:08.413Z</updated>
  <id>http://zgjjj.github.io/</id>
  
  <author>
    <name>zgjjj</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>贪心策略 学习报告</title>
    <link href="http://zgjjj.github.io/2019/01/24/%E8%B4%AA%E5%BF%83%E7%AD%96%E7%95%A5-%E5%AD%A6%E4%B9%A0%E6%8A%A5%E5%91%8A/"/>
    <id>http://zgjjj.github.io/2019/01/24/贪心策略-学习报告/</id>
    <published>2019-01-24T04:01:07.000Z</published>
    <updated>2019-01-24T05:18:08.413Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>大胆贪心，<del>（不用）</del>小心证明。<br>——阮行止</p></blockquote><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>贪心算法，本质上来讲不是一种算法，而是一种策略。其基本思路是在题解满足<strong>局部最优解</strong>将导致<strong>全局最优解</strong>时，每一次<strong>决策</strong>考虑且仅考虑当前最优解。</p><h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><p>就拿天朝RMB面额的设计来讲，仅举<strong>元</strong>这一单位，分别有<strong>1元，5元，10元，50元，100元</strong>五种面额。<br><strong>为什么要这样设计呢？</strong><br>在日常的生活中，我们买东西时就会发现，对于<strong>任意一个价格的商品</strong>，我们在购买时，要想花费最少张数的RMB，只需<strong>永远花费当前小于等于商品面额的货币</strong>。这就是一种贪心策略。</p><h2 id="例子的证明"><a href="#例子的证明" class="headerlink" title="例子的证明"></a>例子的证明</h2><p><del>我太菜了不会证</del>。</p><h1 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h1><h2 id="题意方面"><a href="#题意方面" class="headerlink" title="题意方面"></a>题意方面</h2><p>在<strong>定义</strong>中就提到过，要想使用贪心策略，<strong>一定</strong>要在题解满足<strong>局部最优解导致全局最优解</strong>。对于简单的贪心，<del>你看题面就知道这是个贪心</del>，而有技巧的贪心则需要自己的猜测<del>与证明</del>。</p><h2 id="关于局部最优解"><a href="#关于局部最优解" class="headerlink" title="关于局部最优解"></a>关于局部最优解</h2><p>局部最优解，即在<strong>当前局面看来</strong>，<strong>不考虑后续状态</strong>的情况下，结果最优的解。即是当前问题的一个<strong>子问题</strong>的最优解。</p><h2 id="贪心的证明"><a href="#贪心的证明" class="headerlink" title="贪心的证明"></a>贪心的证明</h2><p>贪心策略是需要证明的，至于严谨性就看个人对于答案的确信程度<del>和rp</del>。</p><h3 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h3><h4 id="微扰法"><a href="#微扰法" class="headerlink" title="微扰法"></a>微扰法</h4><p>个人至今都不是很会的一种方法。<br>就是先假设一种贪心策略，再对该策略的局面做出<strong>所有</strong>可能的<strong>扰动</strong>（如交换相邻的两个元素），然后讨论扰动后的局面是否会造成<strong>更优的局面</strong>，若是，则原贪心策略被推翻；若对于所有的扰动局面，都有<strong>原贪心策略优于微扰后的策略</strong>，那么贪心成立。</p><h4 id="解集分析法"><a href="#解集分析法" class="headerlink" title="解集分析法"></a>解集分析法</h4><p>先枚举出<strong>小规模</strong>内的局面，若对于该规模问题，所有的解均能由<strong>同一种贪心策略</strong>取得，那么考虑该策略，扩大问题规模<del>（有点像迭代加深搜索）</del>，将该策略取得的解与枚举的解对比，若成立，则策略<strong>极有可能</strong>成立。<br><strong>注意这里的极有可能</strong>，<del>有些毒瘤数据可能刚好违背该策略</del>，所以这是一种不严谨的方法。</p><h4 id="数学方法"><a href="#数学方法" class="headerlink" title="数学方法"></a>数学方法</h4><p>我们先看个<strong>典例</strong>：</p><h5 id="排队打水问题"><a href="#排队打水问题" class="headerlink" title="排队打水问题"></a>排队打水问题</h5><pre><code>有n个人排队到r个水龙头去打水，他们装满水桶的时间t1、t2………..tn为整数且各不相等，应如何安排他们的打水顺序才能使他们总共花费的时间最少？ </code></pre><p>好像前面两种方法都行不通了？<del>其实我没试过</del><br>我没来看一个<strong>黑科技</strong>：</p><h5 id="排序不等式"><a href="#排序不等式" class="headerlink" title="排序不等式"></a><a href="https://baike.baidu.com/item/排序不等式/7775728?fr=aladdin" target="_blank" rel="noopener">排序不等式</a></h5><p>不等式的证明百科上讲的很清楚了，我就把结论挂在这吧：<br>$$\text{对于两个有序数组:$a_1\le a_2\le a_3\le …\le a_n$及$b_1\le b_2\le b_3\le …\le b_n$:}​$$</p><p>$$\sum\limits_{i=1}^na_ib_i\ge \sum\limits_{i=1}^na_ib_{j_i}\ge\sum\limits_{i=1}^na_ib_{n+1-i} $$</p><p>$${通俗来讲，就是顺序和\ge 乱序和\ge 逆序和}$$</p><p>那么，上面的例子就很好解决了吧？</p><p>总是规划打水时间最短者先打，再计算总打水时间，就可以得到最优的打水时间。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>正如<code>阮行止</code>所说,<code>“太贪心了是要栽跟头的。”</code>，贪心策略固可解决一部分题，但是，如果时时刻刻想着贪心，<del>DP也写贪心</del>，终究是得不到高分的。做人也正是如此吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;大胆贪心，&lt;del&gt;（不用）&lt;/del&gt;小心证明。&lt;br&gt;——阮行止&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;h2 
      
    
    </summary>
    
    
      <category term="学习报告" scheme="http://zgjjj.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%8A%A5%E5%91%8A/"/>
    
      <category term="贪心" scheme="http://zgjjj.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>Luogu P1616 疯狂的采药 解题报告</title>
    <link href="http://zgjjj.github.io/2019/01/19/%E7%96%AF%E7%8B%82%E7%9A%84%E9%87%87%E8%8D%AF/"/>
    <id>http://zgjjj.github.io/2019/01/19/疯狂的采药/</id>
    <published>2019-01-19T05:14:16.000Z</published>
    <updated>2019-01-24T04:03:41.967Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接-P1616-疯狂的采药"><a href="#题目链接-P1616-疯狂的采药" class="headerlink" title="题目链接:P1616 疯狂的采药"></a>题目链接:<a href="https://www.luogu.org/problemnew/show/P1616" target="_blank" rel="noopener">P1616 疯狂的采药</a></h2><h2 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h2><p><del>很明显的</del>完全背包。<br><a id="more"></a><br>首先，我们先把这道题转化为标准完全背包：</p><table><thead><tr><th style="text-align:center">各种草药</th><th style="text-align:center">物品</th></tr></thead><tbody><tr><td style="text-align:center"><strong>草药的价值</strong></td><td style="text-align:center"><strong>物品的价值</strong></td></tr><tr><td style="text-align:center"><strong>草药的采摘时间</strong></td><td style="text-align:center"><strong>物品的质量</strong></td></tr><tr><td style="text-align:center"><strong>总采摘时间</strong></td><td style="text-align:center"><strong>背包容量</strong></td></tr></tbody></table><p>ok,那么这道题就变成了板子题。</p><p>我们先来<strong>设计状态</strong>：</p><p>设<br>$$\text{dp[i]为背包容量为i时，能放下的物品的最大价值}$$</p><p>$$\text{t[j]与p[j]分别存储第j个物品的质量和价值}$$</p><p>然后进行<strong>状态转移</strong>：</p><p>对于容量为k的背包，第m个物品，我们考虑：</p><p>如果放这件物品，那么k容量背包的价值为dp[k-t[m]]+p[m]</p><p>如果不放，那么k容量背包的价值仍为原始的dp[k]</p><p>根据数组dp的定义，我们可以得到状态转移方程:</p><p>$$\text{dp[k]=max(dp[k-t[m]]+p[m],dp[k])}$$</p><p>同时，我们需要考虑该物品放入背包的先决条件：</p><p>$$\text{k-t[m]}\ge\text{0}$$</p><p>考虑每一件物品，并且综合上面的条件,我们得到了代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=T;i++)&#123;</span><br><span class="line">dp[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//初始化，可通过将数组开在主函数外面省略这一步</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i-t[j]&gt;=<span class="number">0</span>) dp[i]=max(dp[i],dp[i-t[j]]+p[j])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>问题所求的便是<strong>dp[T]。</strong></p><h2 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::max;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;T,&amp;n);</span><br><span class="line"><span class="keyword">int</span> t[n+<span class="number">1</span>],p[n+<span class="number">1</span>],dp[T+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;t[i],&amp;p[i]);</span><br><span class="line">&#125;</span><br><span class="line">dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=T;i++)&#123;</span><br><span class="line">dp[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i-t[j]&gt;=<span class="number">0</span>) dp[i]=max(dp[i],dp[i-t[j]]+p[j])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,dp[T]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接-P1616-疯狂的采药&quot;&gt;&lt;a href=&quot;#题目链接-P1616-疯狂的采药&quot; class=&quot;headerlink&quot; title=&quot;题目链接:P1616 疯狂的采药&quot;&gt;&lt;/a&gt;题目链接:&lt;a href=&quot;https://www.luogu.org/problemnew/show/P1616&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;P1616 疯狂的采药&lt;/a&gt;&lt;/h2&gt;&lt;h2 id=&quot;题目分析：&quot;&gt;&lt;a href=&quot;#题目分析：&quot; class=&quot;headerlink&quot; title=&quot;题目分析：&quot;&gt;&lt;/a&gt;题目分析：&lt;/h2&gt;&lt;p&gt;&lt;del&gt;很明显的&lt;/del&gt;完全背包。&lt;br&gt;
    
    </summary>
    
    
      <category term="解题报告" scheme="http://zgjjj.github.io/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="线性DP" scheme="http://zgjjj.github.io/tags/%E7%BA%BF%E6%80%A7DP/"/>
    
  </entry>
  
  <entry>
    <title>小闹钟</title>
    <link href="http://zgjjj.github.io/2019/01/19/%E5%B0%8F%E9%97%B9%E9%92%9F/"/>
    <id>http://zgjjj.github.io/2019/01/19/小闹钟/</id>
    <published>2019-01-19T04:58:08.000Z</published>
    <updated>2019-01-19T09:58:05.202Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>你从来没有玩过的船新版本</strong><br><a id="more"></a><br>当前版本只支持倒计时<del>(巨水</del></p><h3 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> hour,second,minute;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"输入格式\"时 分 秒\""</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;hour&gt;&gt;minute&gt;&gt;second;</span><br><span class="line"><span class="keyword">if</span>(minute==<span class="number">60</span>&amp;&amp;second&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Input error!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(minute&gt;<span class="number">60</span>||second&gt;<span class="number">60</span>) </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Input error!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3600</span>*hour+<span class="number">60</span>*minute+second;i&gt;<span class="number">0</span>;Sleep(<span class="number">1000</span>),i--)</span><br><span class="line">&#123;</span><br><span class="line">system(<span class="string">"cls"</span>);</span><br><span class="line"><span class="keyword">if</span>((minute)&lt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">hour-=<span class="number">1</span>;</span><br><span class="line">minute=<span class="number">60</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((second<span class="number">-1</span>)&lt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">minute-=<span class="number">1</span>;</span><br><span class="line">second=<span class="number">60</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(second&lt;<span class="number">10</span>&amp;&amp;minute&lt;<span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">second--;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;hour&lt;&lt;<span class="string">":0"</span>&lt;&lt;minute&lt;&lt;<span class="string">":0"</span>&lt;&lt;second&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(second&lt;<span class="number">10</span>&amp;&amp;minute&gt;=<span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">second--;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;hour&lt;&lt;<span class="string">":"</span>&lt;&lt;minute&lt;&lt;<span class="string">":0"</span>&lt;&lt;second&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(second&gt;=<span class="number">10</span>&amp;&amp;minute&lt;<span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">second--;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;hour&lt;&lt;<span class="string">":0"</span>&lt;&lt;minute&lt;&lt;<span class="string">":"</span>&lt;&lt;second&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(second&gt;=<span class="number">10</span>&amp;&amp;minute&gt;=<span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">second--;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;hour&lt;&lt;<span class="string">":"</span>&lt;&lt;minute&lt;&lt;<span class="string">":"</span>&lt;&lt;second&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">10</span>;i&gt;<span class="number">0</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"\a"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">Sleep(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;你从来没有玩过的船新版本&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://zgjjj.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
